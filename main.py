import asyncio
import logging
import csv
import os
import traceback
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
import aiosqlite
from aiogram.exceptions import TelegramAPIError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('memo_bot.log', encoding='utf-8'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("\n –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
if not ADMIN_IDS:
    raise ValueError("\n –ù–µ —É–∫–∞–∑–∞–Ω—ã ADMIN_IDS –≤ .env —Ñ–∞–π–ª–µ")
DB_PATH = "database.db"

# –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
OFFER_URL = "https://telegra.ph/Publichnaya-oferta-07-25-7"
PRIVACY_URL = "https://telegra.ph/Politika-konfidencialnosti-07-19-25"
RULES_URL = "https://telegra.ph/Pravila-07-19-160"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_context = {}

# –ö–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
REQUIRED_CHANNEL_ID = -1002734060041
REQUIRED_CHANNEL_URL = "https://t.me/ItMEMOshop"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "welcome": (
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è PUBG Mobile - Metro Royale!\n"
        "üíº –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 20% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞."
    ),
    "not_subscribed": "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
    "no_access": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
    "no_squads": "üè† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤.",
    "no_escorts": "üë§ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.",
    "no_orders": "üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "no_active_orders": "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "invalid_format": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "order_completed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} (Telegram ID: {telegram_id}, PUBG ID: {pubg_id})!",
    "order_already_completed": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
    "balance_added": "üí∏ –ë–∞–ª–∞–Ω—Å {amount} —Ä—É–±. –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
    "squad_full": "‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º—É–º 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
    "squad_too_small": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ '{squad_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!",
    "order_added": "üìù –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω! –°—É–º–º–∞: {amount} —Ä—É–±., –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –ö–ª–∏–µ–Ω—Ç: {customer}",
    "rules_not_accepted": "üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, –æ—Ñ–µ—Ä—Ç—É –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
    "user_banned": "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
    "user_restricted": "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {date}.",
    "balance_zeroed": "üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω—É–ª–µ–Ω.",
    "pubg_id_updated": "üî¢ PUBG ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
    "ping": "üèì –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!",
    "order_taken": "üìù –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç —Å–∫–≤–∞–¥–æ–º {squad_name}!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}",
    "order_not_enough_members": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ '{squad_name}' –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2)!",
    "order_already_in_progress": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –≤ –Ω–∞–±–æ—Ä–µ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç!",
    "order_joined": "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–±–æ—Ä—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}!\n–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:\n{participants}",
    "order_confirmed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}",
    "not_in_squad": "‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ!",
    "max_participants": "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
    "rating_submitted": "üåü –û—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –†–µ–ø—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
    "rate_order": "üåü –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ –∑–∞–∫–∞–∑ #{order_id} (1-5):",
    "payout_log": "üí∏ –í—ã–ø–ª–∞—Ç–∞: @{username} –ø–æ–ª—É—á–∏–ª {amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}. –î–∞—Ç–∞: {date}",
    "payout_request": "üì• –ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç @{username} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}",
    "payout_receipt": "‚úÖ –Ø, @{username}, –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É {amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}.",
    "export_success": "üì§ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}!",
    "no_data_to_export": "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
    "reminder": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.",
    "squad_deleted": "üè† –°–∫–≤–∞–¥ '{squad_name}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!",
    "cancel_action": "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
    "support_request": "üì© –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
    "support_sent": "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!",
    "user_unbanned": "üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
    "user_unrestricted": "üîì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —Å–Ω—è—Ç—ã!"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    squad_name = State()
    escort_info = State()
    assign_squad = State()
    remove_escort = State()
    zero_balance = State()
    pubg_id = State()
    balance_amount = State()
    complete_order = State()
    add_order = State()
    ban_duration = State()
    restrict_duration = State()
    rate_order = State()
    ban_permanent = State()
    profit_user = State()
    payout_request = State()
    delete_squad = State()
    support_message = State()
    support_reply = State()
    unban_user = State()
    unrestrict_user = State()


    delete_order = State()
    admin_rate_order = State()
    add_reputation = State()
    remove_reputation = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–∞–º–∏
    leader_user_id = State()
    leader_squad_name = State()
    remove_leader_user_id = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ª–∏–¥–µ—Ä–∞
    rename_squad = State()
    add_member = State()
    remove_member = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏
    contact_leader_message = State()
    contact_user_id = State()
    contact_user_message = State()
    broadcast_message = State()

# --- –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        import os
        db_dir = os.path.dirname(DB_PATH) if os.path.dirname(DB_PATH) else "."
        if not os.path.exists(db_dir):
            os.makedirs(db_dir, exist_ok=True)

        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.executescript('''
                CREATE TABLE IF NOT EXISTS squads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    rating REAL DEFAULT 0,
                    rating_count INTEGER DEFAULT 0,
                    leader_id INTEGER,
                    FOREIGN KEY (leader_id) REFERENCES escorts (id) ON DELETE SET NULL
                );
                CREATE TABLE IF NOT EXISTS escorts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    pubg_id TEXT,
                    squad_id INTEGER,
                    balance REAL DEFAULT 0,
                    reputation INTEGER DEFAULT 0,
                    completed_orders INTEGER DEFAULT 0,
                    rating REAL DEFAULT 0,
                    rating_count INTEGER DEFAULT 0,
                    total_rating REAL DEFAULT 0,
                    is_banned INTEGER DEFAULT 0,
                    ban_until TIMESTAMP,
                    restrict_until TIMESTAMP,
                    rules_accepted INTEGER DEFAULT 0,
                    FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE SET NULL
                );
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    memo_order_id TEXT UNIQUE NOT NULL,
                    customer_info TEXT NOT NULL,
                    amount REAL NOT NULL,
                    commission_amount REAL DEFAULT 0.0,
                    status TEXT DEFAULT 'pending',
                    squad_id INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    completed_at TIMESTAMP,
                    rating INTEGER DEFAULT 0,
                    FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE SET NULL
                );
                CREATE TABLE IF NOT EXISTS order_escorts (
                    order_id INTEGER,
                    escort_id INTEGER,
                    pubg_id TEXT,
                    PRIMARY KEY (order_id, escort_id),
                    FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
                    FOREIGN KEY (escort_id) REFERENCES escorts (id) ON DELETE CASCADE
                );
                CREATE TABLE IF NOT EXISTS order_applications (
                    order_id INTEGER,
                    escort_id INTEGER,
                    squad_id INTEGER,
                    pubg_id TEXT,
                    PRIMARY KEY (order_id, escort_id),
                    FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
                    FOREIGN KEY (escort_id) REFERENCES escorts (id) ON DELETE CASCADE,
                    FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE SET NULL
                );
                CREATE TABLE IF NOT EXISTS payouts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    escort_id INTEGER,
                    amount REAL,
                    payout_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE SET NULL,
                    FOREIGN KEY (escort_id) REFERENCES escorts (id) ON DELETE SET NULL
                );
                CREATE TABLE IF NOT EXISTS action_log (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    action_type TEXT,
                    user_id INTEGER,
                    order_id INTEGER,
                    description TEXT,
                    action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );


                CREATE INDEX IF NOT EXISTS idx_escorts_telegram_id ON escorts (telegram_id);
                CREATE INDEX IF NOT EXISTS idx_orders_memo_order_id ON orders (memo_order_id);
                CREATE INDEX IF NOT EXISTS idx_order_escorts_order_id ON order_escorts (order_id);
                CREATE INDEX IF NOT EXISTS idx_order_applications_order_id ON order_applications (order_id);
                CREATE INDEX IF NOT EXISTS idx_payouts_order_id ON payouts (order_id);
                CREATE INDEX IF NOT EXISTS idx_action_log_action_date ON action_log (action_date);

                -- –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å–∫–≤–∞–¥–æ–≤
                CREATE TABLE IF NOT EXISTS squad_leaders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    leader_id INTEGER NOT NULL,
                    squad_id INTEGER NOT NULL,
                    appointed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (leader_id) REFERENCES escorts (id) ON DELETE CASCADE,
                    FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE CASCADE,
                    UNIQUE(leader_id, squad_id)
                );

                CREATE INDEX IF NOT EXISTS idx_squad_leaders_leader_id ON squad_leaders (leader_id);
                CREATE INDEX IF NOT EXISTS idx_squad_leaders_squad_id ON squad_leaders (squad_id);
            ''')
            await conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}\n\n{traceback.format_exc()}")
        raise

async def log_action(action_type: str, user_id: int, order_id: int = None, description: str = None):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "INSERT INTO action_log (action_type, user_id, order_id, description) VALUES (?, ?, ?, ?)",
                (action_type, user_id, order_id, description)
            )
            await conn.commit()
        logger.info(f"–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è: {action_type}, user_id: {user_id}, order_id: {order_id}, description: {description}")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}\n\n{traceback.format_exc()}")

async def get_escort(telegram_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, squad_id, pubg_id, balance, reputation, completed_orders, username, "
                "rating, rating_count, is_banned, ban_until, restrict_until, rules_accepted "
                "FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            return await cursor.fetchone()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_escort –¥–ª—è {telegram_id}: {e}\n\n{traceback.format_exc()}")
        return None

async def add_escort(telegram_id: int, username: str):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "INSERT OR IGNORE INTO escorts (telegram_id, username, rules_accepted) VALUES (?, ?, 0)",
                (telegram_id, username)
            )
            await conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username})")
        return True
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_escort –¥–ª—è {telegram_id}: {e}\n\n{traceback.format_exc()}")
        return False

async def get_squad_escorts(squad_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT telegram_id, username, pubg_id, rating FROM escorts WHERE squad_id = ?", (squad_id,)
            )
            return await cursor.fetchall()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_squad_escorts –¥–ª—è squad_id {squad_id}: {e}\n\n{traceback.format_exc()}")
        return []

async def get_squad_info(squad_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT s.name, COUNT(e.id) as member_count,
                       COALESCE(SUM(e.completed_orders), 0) as total_orders,
                       COALESCE(SUM(e.balance), 0) as total_balance,
                       s.rating, s.rating_count
                FROM squads s
                LEFT JOIN escorts e ON e.squad_id = s.id
                WHERE s.id = ?
                GROUP BY s.id
                ''', (squad_id,)
            )
            return await cursor.fetchone()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_squad_info –¥–ª—è squad_id {squad_id}: {e}\n\n{traceback.format_exc()}")
        return None

async def notify_squad(squad_id: int, message: str):
    if squad_id is None:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id FROM escorts")
            escorts = await cursor.fetchall()
    else:
        escorts = await get_squad_escorts(squad_id)
    for telegram_id, *_ in escorts:
        try:
            await bot.send_message(telegram_id, message)
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id}: {e}")

async def notify_squad_with_mentions(squad_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–∞–º —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if squad_id is None:
        return

    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, s.name
                FROM escorts e
                JOIN squads s ON e.squad_id = s.id
                WHERE e.squad_id = ?
                ''', (squad_id,)
            )
            squad_members = await cursor.fetchall()

        if not squad_members:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mentions = []
        for telegram_id, username, squad_name in squad_members:
            if username:
                mentions.append(f"@{username}")
            else:
                mentions.append(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={telegram_id})")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        mention_text = ", ".join(mentions)
        full_message = f"{message}\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫–≤–∞–¥–∞: {mention_text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–∫–≤–∞–¥–∞
        for telegram_id, username, _ in squad_members:
            try:
                await bot.send_message(telegram_id, full_message, parse_mode=ParseMode.MARKDOWN)
            except TelegramAPIError:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    await bot.send_message(telegram_id, message)
                except TelegramAPIError:
                    pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_squad_with_mentions: {e}")
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await notify_squad(squad_id, message)

async def notify_admins(message: str, reply_markup=None):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message, reply_markup=reply_markup)
        except TelegramAPIError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

async def get_order_applications(order_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, e.pubg_id, e.squad_id, s.name
                FROM order_applications oa
                JOIN escorts e ON oa.escort_id = e.id
                LEFT JOIN squads s ON e.squad_id = s.id
                WHERE oa.order_id = ?
                ''', (order_id,)
            )
            return await cursor.fetchall()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_order_applications –¥–ª—è order_id {order_id}: {e}\n\n{traceback.format_exc()}")
        return []

async def get_order_info(memo_order_id: str):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, customer_info, amount, status, squad_id, commission_amount FROM orders WHERE memo_order_id = ?",
                (memo_order_id,)
            )
            return await cursor.fetchone()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_order_info –¥–ª—è memo_order_id {memo_order_id}: \n{e}\n{traceback.format_exc()}")
        return None

async def update_escort_reputation(escort_id: int, rating: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
            await conn.execute(
                '''
                UPDATE escorts
                SET total_rating = total_rating + ?,
                    rating_count = rating_count + 1
                WHERE id = ?
                ''',
                (rating, escort_id)
            )
            await conn.commit()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_escort_reputation –¥–ª—è escort_id {escort_id}: \n{e}\n{traceback.format_exc()}")

async def update_squad_reputation(squad_id: int, rating: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            cursor = await conn.execute(
                "SELECT rating, rating_count FROM squads WHERE id = ?", (squad_id,)
            )
            row = await cursor.fetchone()
            if row:
                current_rating, rating_count = row
                new_rating_count = rating_count + 1
                new_rating = (current_rating * rating_count + rating) / new_rating_count

                await conn.execute(
                    '''
                    UPDATE squads
                    SET rating = ?,
                        rating_count = ?
                    WHERE id = ?
                    ''',
                    (new_rating, new_rating_count, squad_id)
                )
            await conn.commit()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_squad_reputation –¥–ª—è squad_id {squad_id}: \n{e}\n{traceback.format_exc()}")

async def get_order_escorts(order_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, oe.pubg_id, e.squad_id, s.name
                FROM order_escorts oe
                JOIN escorts e ON oe.escort_id = e.id
                LEFT JOIN squads s ON e.squad_id = s.id
                WHERE oe.order_id = ?
                ''', (order_id,)
            )
            return await cursor.fetchall()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_order_escorts –¥–ª—è order_id {order_id}: {e}\n\n{traceback.format_exc()}")
        return []

async def export_orders_to_csv():
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.memo_order_id, o.customer_info, o.amount, o.commission_amount, o.status, o.created_at, o.completed_at,
                s.name as squad_name, p.amount as payout_amount, p.payout_date
                FROM orders o
                LEFT JOIN squads s ON o.squad_id = s.id
                LEFT JOIN payouts p ON o.id = p.order_id
                '''
            )
            rows = await cursor.fetchall()
        if not rows:
            return None
        filename = f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Memo Order ID', 'Customer Info', 'Amount', 'Commission', 'Status', 'Created At', 'Completed At',
                             'Squad', 'Payout Amount', 'Payout Date'])
            writer.writerows(rows)
        return filename
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_orders_to_csv: {e}\n{traceback.format_exc()}")
        return None

async def check_pending_orders():
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT id, memo_order_id, squad_id
                FROM orders
                WHERE status = 'in_progress' AND created_at < ?
                ''', ((datetime.now() - timedelta(hours=12)).isoformat(),)
            )
            orders = await cursor.fetchall()

        for order_id, memo_order_id, squad_id in orders:
            await notify_squad(squad_id, MESSAGES["reminder"].format(order_id=memo_order_id))
            await log_action("reminder_sent", None, order_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{memo_order_id}")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_pending_orders: {e}\n{traceback.format_exc()}")



# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_leader(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞"""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT COUNT(*) FROM escorts e
                JOIN squad_leaders sl ON e.id = sl.leader_id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            result = await cursor.fetchone()
            return result[0] > 0
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ –¥–ª—è {user_id}: {e}")
        return False

async def get_user_rating_position(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await conn.execute(
                "SELECT total_rating, rating_count FROM escorts WHERE telegram_id = ?",
                (user_id,)
            )
            user_data = await cursor.fetchone()
            if not user_data or user_data[1] == 0:
                return None, 0.0

            user_rating = user_data[0] / user_data[1]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
            cursor = await conn.execute(
                '''
                SELECT telegram_id, total_rating, rating_count
                FROM escorts
                WHERE rating_count > 0
                ORDER BY (total_rating / rating_count) DESC
                '''
            )
            ratings = await cursor.fetchall()

            position = 1
            for telegram_id, total_rating, rating_count in ratings:
                if telegram_id == user_id:
                    return position, user_rating
                position += 1

            return None, user_rating
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è {user_id}: {e}")
        return None, 0.0

async def get_squad_rating_position(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å–∫–≤–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–≤–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await conn.execute(
                "SELECT squad_id FROM escorts WHERE telegram_id = ?",
                (user_id,)
            )
            user_data = await cursor.fetchone()
            if not user_data or not user_data[0]:
                return None, None, 0.0

            squad_id = user_data[0]

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞
            cursor = await conn.execute(
                "SELECT name FROM squads WHERE id = ?",
                (squad_id,)
            )
            squad_name_result = await cursor.fetchone()
            squad_name = squad_name_result[0] if squad_name_result else "Unknown"

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–∞
            cursor = await conn.execute(
                '''
                SELECT AVG(total_rating / rating_count) as avg_rating
                FROM escorts
                WHERE squad_id = ? AND rating_count > 0
                ''', (squad_id,)
            )
            squad_rating_result = await cursor.fetchone()
            squad_rating = squad_rating_result[0] if squad_rating_result and squad_rating_result[0] else 0.0

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å–∫–≤–∞–¥–æ–≤
            cursor = await conn.execute(
                '''
                SELECT s.id, s.name, AVG(e.total_rating / e.rating_count) as avg_rating
                FROM squads s
                JOIN escorts e ON s.id = e.squad_id
                WHERE e.rating_count > 0
                GROUP BY s.id
                HAVING COUNT(e.id) > 0
                ORDER BY avg_rating DESC
                '''
            )
            squad_ratings = await cursor.fetchall()

            position = 1
            for sid, sname, rating in squad_ratings:
                if sid == squad_id:
                    return position, squad_name, squad_rating
                position += 1

            return None, squad_name, squad_rating
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–∫–≤–∞–¥–∞ –¥–ª—è {user_id}: {e}")
        return None, None, 0.0

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
async def get_menu_keyboard(user_id: int):
    base_keyboard = [
        [KeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–æ–≤")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∏–¥–µ—Ä–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º
    if await is_leader(user_id):
        base_keyboard.append([KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"), KeyboardButton(text="üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–æ–º")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(user_id):
        base_keyboard.append([KeyboardButton(text="üö™ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–ø–ª–∞—Ç—ã –≤ –∫–æ–Ω–µ—Ü –¥–ª—è –≤—Å–µ—Ö
    base_keyboard.append([KeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É")])

    keyboard = ReplyKeyboardMarkup(
        keyboard=base_keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–∫–≤–∞–¥—ã"), KeyboardButton(text="üë§ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ")],
            [KeyboardButton(text="üìù –ó–∞–∫–∞–∑—ã"), KeyboardButton(text="üö´ –ë–∞–Ω—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å—ã"), KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞–º–∏"), KeyboardButton(text="üìä –ü—Ä–æ—á–µ–µ")],
            [KeyboardButton(text="üìû –°–≤—è–∑—å"), KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_orders_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_squads_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")],
            [KeyboardButton(text="üóëÔ∏è –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∫–≤–∞–¥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_escorts_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_bans_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"), KeyboardButton(text="‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")],
            [KeyboardButton(text="üîì –°–Ω—è—Ç—å –±–∞–Ω"), KeyboardButton(text="üîì –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_balances_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å"), KeyboardButton(text="üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_misc_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π"), KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_admin_orders_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_users_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç CSV")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"), KeyboardButton(text="üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_reputation_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é"), KeyboardButton(text="‚ûñ –°–Ω—è—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard



def get_rules_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è")],
            [KeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞")],
            [KeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_cancel_keyboard(is_admin: bool = False):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_order_keyboard(order_id: int):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"join_order_{order_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_id}")]
    ])
    return keyboard

def get_confirmed_order_keyboard(order_id: str, is_admin: bool = False):
    buttons = [[InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete_order_{order_id}")]]

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_confirmed_order_{order_id}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_confirmed_order_keyboard_user(order_id: str):
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–∫–∞–∑–∞
    return None

def get_rating_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 ‚≠ê", callback_data=f"rate_{order_id}_1"),
            InlineKeyboardButton(text="2 ‚≠ê", callback_data=f"rate_{order_id}_2"),
            InlineKeyboardButton(text="3 ‚≠ê", callback_data=f"rate_{order_id}_3")
        ],
        [
            InlineKeyboardButton(text="4 ‚≠ê", callback_data=f"rate_{order_id}_4"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data=f"rate_{order_id}_5")
        ]
    ])
    return keyboard

# --- –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–∞–º–∏ ---
def get_leaders_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton(text="üóëÔ∏è –£–±—Ä–∞—Ç—å –ª–∏–¥–µ—Ä–∞")],
            [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏–¥–µ—Ä–æ–º")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_squad_management_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–∫–≤–∞–¥")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_members_management_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")],
            [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_communication_submenu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")],
            [KeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_personal_cabinet_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ PUBG ID")],
            [KeyboardButton(text="‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ---
async def check_access(message: types.Message, initial_start: bool = False):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    try:
        escort = await get_escort(user_id)
        if not escort:
            if not await add_escort(user_id, username):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())
                return False
            escort = await get_escort(user_id)
            if not escort:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())
                return False
        if escort[9]:  # is_banned
            await message.answer(MESSAGES["user_banned"], reply_markup=ReplyKeyboardRemove())
            return False
        if escort[10] and datetime.fromisoformat(escort[10]) > datetime.now():  # ban_until
            formatted_date = datetime.fromisoformat(escort[10]).strftime("%d.%m.%Y %H:%M")
            await message.answer(MESSAGES["user_banned"].format(date=formatted_date), reply_markup=ReplyKeyboardRemove())
            return False
        if escort[11] and datetime.fromisoformat(escort[11]) > datetime.now():  # restrict_until
            formatted_date = datetime.fromisoformat(escort[11]).strftime("%d.%m.%Y %H:%M")
            await message.answer(MESSAGES["user_restricted"].format(date=formatted_date), reply_markup=ReplyKeyboardRemove())
            return False
        if not escort[12] and initial_start:  # rules_accepted
            await message.answer(MESSAGES["rules_not_accepted"], reply_markup=get_rules_keyboard())
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
        if not is_admin(user_id) and not await check_subscription(user_id):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=REQUIRED_CHANNEL_URL)],
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
            ])
            await message.answer(MESSAGES["not_subscribed"], reply_markup=keyboard)
            return False
        
        return True
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ check_access –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())
        return False
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ check_access –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    try:
        if not await check_access(message, initial_start=True):
            return
        user_context[user_id] = 'main_menu'
        await message.answer(f"{MESSAGES['welcome']}\n\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ cmd_start –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    try:
        await message.answer(MESSAGES["ping"], reply_markup=await get_menu_keyboard(message.from_user.id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ cmd_ping –¥–ª—è {message.from_user.id}: \n{e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è")
async def accept_rules(message: types.Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("UPDATE escorts SET rules_accepted = 1 WHERE telegram_id = ?", (user_id,))
            await conn.commit()
        user_context[user_id] = 'main_menu'
        await message.answer(f"‚úÖ –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è")
        await log_action("accept_rules", user_id, None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ accept_rules –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ accept_rules –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üî¢ –í–≤–µ—Å—Ç–∏ PUBG ID")
async def enter_pubg_id(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    try:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PUBG ID:", reply_markup=get_cancel_keyboard())
        await state.set_state(Form.pubg_id)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ enter_pubg_id –¥–ª—è \n{message.from_user.id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(message.from_user.id))
        await state.clear()

@dp.message(Form.pubg_id)
async def process_pubg_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
        return
    pubg_id = message.text.strip()
    if not pubg_id:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard())
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "UPDATE escorts SET pubg_id = ? WHERE telegram_id = ?",
                (pubg_id, user_id)
            )
            await conn.commit()
        await message.answer("üî¢ PUBG ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_personal_cabinet_keyboard())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª PUBG ID: {pubg_id}")
        await log_action("update_pubg_id", user_id, None, f"–û–±–Ω–æ–≤–ª–µ–Ω PUBG ID: {pubg_id}")
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_pubg_id –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_pubg_id –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_handler(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL)],
            [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞", url=RULES_URL)],
            [InlineKeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", url=OFFER_URL)]
        ])
        response = (
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n"
            "\n –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 20% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞."
        )
        await message.answer(response, reply_markup=keyboard)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ info_handler: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(message.from_user.id))

@dp.callback_query(F.data == "about_project")
async def about_project(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        response = (
            "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ:\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é –≤ Metro Royale. "
            "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è, –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã."
        )
        await callback.message.answer(response, reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ about_project –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))



@dp.message(F.text == "üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
async def privacy_link(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL)]
        ])
        await message.answer("üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ privacy_link: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üìñ –ü—Ä–∞–≤–∏–ª–∞")
async def rules_link(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞", url=RULES_URL)]
        ])
        await message.answer("üìñ –ü—Ä–∞–≤–∏–ª–∞:", reply_markup=keyboard)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ rules_link: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
async def offer_link(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", url=OFFER_URL)]
        ])
        await message.answer("üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞:", reply_markup=keyboard)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ rules_links: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        user_context[user_id] = 'personal_cabinet'
        await message.answer("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=get_personal_cabinet_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ personal_cabinet –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("\n –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            return
        escort_id, squad_id, pubg_id, balance, reputation, completed_orders, username, rating, rating_count, _, ban_until, restrict_until, _ = escort
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
            squad = await cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –≤ –∑–≤–µ–∑–¥–∞—Ö
            cursor = await conn.execute(
                "SELECT total_rating, rating_count FROM escorts WHERE telegram_id = ?",
                (user_id,)
            )
            rating_data = await cursor.fetchone()

        stars_rating = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        if rating_data and rating_data[1] > 0:
            star_rating = rating_data[0] / rating_data[1]
            stars_rating = f"‚òÖ {star_rating:.2f} / 5.00"

        avg_rating = rating / rating_count if rating_count > 0 else 0
        response = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"Username: @{username or 'Unknown'}\n"
            f"PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–°–∫–≤–∞–¥: {squad[0] if squad else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            f"–†–µ–π—Ç–∏–Ω–≥ –≤ –∑–≤–µ–∑–¥–∞—Ö: {stars_rating}\n"
        )
        await message.answer(response, reply_markup=get_personal_cabinet_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ my_profile –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_personal_cabinet_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ my_profile –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_personal_cabinet_keyboard())

@dp.message(F.text == "‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def my_rating(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_personal_cabinet_keyboard())
            return
        
        escort_id, _, _, _, _, completed_orders, username, _, _, _, _, _, _ = escort
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∑–≤–µ–∑–¥–∞—Ö
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT total_rating, rating_count FROM escorts WHERE telegram_id = ?",
                (user_id,)
            )
            rating_data = await cursor.fetchone()
        
        stars_rating = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        if rating_data and rating_data[1] > 0:
            star_rating = rating_data[0] / rating_data[1]
            stars_rating = f"‚òÖ {star_rating:.2f} / 5.00"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        user_position, user_rating_value = await get_user_rating_position(user_id)
        position_text = f"üèÜ –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {user_position}" if user_position else "üèÜ –ü–æ–∑–∏—Ü–∏—è: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        response = (
            f"‚≠ê –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:\n\n"
            f"üë§ @{username or 'Unknown'}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stars_rating}\n"
            f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            f"{position_text}"
        )
        
        await message.answer(response, reply_markup=get_personal_cabinet_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_rating –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_personal_cabinet_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_rating –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_personal_cabinet_keyboard())

@dp.message(F.text == "üìã –ó–∞–∫–∞–∑—ã")
async def orders_menu(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        user_context[user_id] = 'orders_submenu'
        await message.answer("\n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:", reply_markup=get_orders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ orders_menu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def available_orders(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Å–∫–≤–∞–¥–µ
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_orders_submenu_keyboard())
            return

        escort_id, squad_id, pubg_id, _, _, _, _, _, _, _, _, _, _ = escort

        if not squad_id:
            await message.answer(MESSAGES["not_in_squad"], reply_markup=get_orders_submenu_keyboard())
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
            cursor = await conn.execute(
                '''
                SELECT o.id, o.memo_order_id, o.customer_info, o.amount, o.created_at
                FROM orders o
                WHERE o.status = 'pending'
                ORDER BY o.created_at DESC
                '''
            )
            all_orders = await cursor.fetchall()

            # –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∫ –Ω–µ–º—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            available_orders_list = []
            for order_id, memo_order_id, customer_info, amount, created_at in all_orders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
                cursor = await conn.execute(
                    "SELECT squad_id, COUNT(*) FROM order_applications WHERE order_id = ? GROUP BY squad_id",
                    (order_id,)
                )
                applications = await cursor.fetchall()

                # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç, –∏–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç –Ω–∞—à–µ–≥–æ —Å–∫–≤–∞–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
                if not applications:
                    # –°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑
                    available_orders_list.append((order_id, memo_order_id, customer_info, amount, 0, None))
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∏ –æ—Ç –Ω–∞—à–µ–≥–æ —Å–∫–≤–∞–¥–∞
                    for app_squad_id, app_count in applications:
                        if app_squad_id == squad_id:
                            available_orders_list.append((order_id, memo_order_id, customer_info, amount, app_count, squad_id))
                            break

        if not available_orders_list:
            await message.answer("üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∫–≤–∞–¥–∞.", reply_markup=get_orders_submenu_keyboard())
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞–±–æ—Ä–∞
        keyboard_buttons = []
        for db_id, order_id, customer, amount, app_count, recruiting_squad in available_orders_list:
            button_text = f"#{order_id} - {customer}, {amount:.2f} —Ä—É–±."
            if app_count > 0 and recruiting_squad == squad_id:
                button_text += f" (–ù–∞–±–æ—Ä: {app_count} —á–µ–ª.)"
            keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"select_order_{db_id}")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
            squad_result = await conn.fetchone()
            squad_name = squad_result[0] if squad_result else "Unknown"

        await message.answer(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Å–∫–≤–∞–¥–∞ '{squad_name}':", reply_markup=keyboard)

    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ available_orders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_orders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ available_orders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_orders_submenu_keyboard())

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ order_escorts (–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã) –∏ order_applications (–∑–∞—è–≤–∫–∏)
            cursor = await conn.execute(
                '''
                SELECT DISTINCT o.memo_order_id, o.customer_info, o.amount, o.status
                FROM orders o
                WHERE o.id IN (
                    SELECT order_id FROM order_escorts WHERE escort_id = ?
                    UNION
                    SELECT order_id FROM order_applications WHERE escort_id = ?
                )
                ORDER BY o.created_at DESC
                ''', (escort_id, escort_id)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer(MESSAGES["no_active_orders"], reply_markup=await get_menu_keyboard(user_id))
            return
        response = "\n –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
        for order_id, customer, amount, status in orders:
            status_text = "–û–∂–∏–¥–∞–µ—Ç" if status == "pending" else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" if status == "in_progress" else "–ó–∞–≤–µ—Ä—à–µ–Ω"
            response += f"#{order_id} - {customer}, {amount:.2f} —Ä—É–±., –°—Ç–∞—Ç—É—Å: {status_text}\n"
        await message.answer(response, reply_markup=await get_menu_keyboard(user_id))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ my_orders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ my_orders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
async def complete_order(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            cursor = await conn.execute(
                '''
                SELECT DISTINCT o.memo_order_id, o.id, o.squad_id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE o.status = 'in_progress'
                AND e.telegram_id = ?
                ''', (user_id,)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer("\n –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return
        response = "\n –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n"
        for order_id, _, _, amount in orders:
            response += f"#{order_id} - {amount:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=get_cancel_keyboard())
        await state.set_state(Form.complete_order)
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ complete_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ complete_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

@dp.message(Form.complete_order)
async def process_complete_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
        return
    order_id = message.text.strip()
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id, _, pubg_id, _, _, _, username, _, _, _, _, _, _ = escort
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cursor = await conn.execute(
                """
                SELECT o.id, o.status, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE o.memo_order_id = ?
                AND o.status = 'in_progress'
                AND e.telegram_id = ?
                """,
                (order_id, user_id)
            )
            order = await cursor.fetchone()
            if not order:
                await message.answer(f"\n –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.", reply_markup=await get_menu_keyboard(user_id))
                await state.clear()
                return
            order_db_id, _, order_amount = order

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_escorts WHERE order_id = ?",
                (order_db_id,)
            )
            participant_count = (await cursor.fetchone())[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2)
            if participant_count < 2:
                await message.answer(f"\n –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2, –µ—Å—Ç—å {participant_count}).", reply_markup=await get_menu_keyboard(user_id))
                await state.clear()
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É —Å —É—á–µ—Ç–æ–º 20% –∫–æ–º–∏—Å—Å–∏–∏
            commission = order_amount * 0.2
            payout_per_participant = (order_amount - commission) / participant_count

            await conn.execute(
                '''
                UPDATE orders SET status = 'completed', completed_at = ? WHERE id = ?
                ''', (datetime.now().isoformat(), order_db_id)
            )

            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (80% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≤–Ω—É)
            await conn.execute(
                '''
                UPDATE escorts SET
                    completed_orders = completed_orders + 1,
                    reputation = reputation + 200,
                    balance = balance + ?
                WHERE id IN (
                    SELECT escort_id FROM order_escorts WHERE order_id = ?
                )
                ''', (payout_per_participant, order_db_id)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["order_completed"].format(
                order_id=order_id,
                username=username or "Unknown",
                telegram_id=user_id,
                pubg_id=pubg_id or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            ) + f"\nüí∞ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ: {payout_per_participant:.2f} —Ä—É–±.",
            reply_markup=await get_menu_keyboard(user_id)
        )
        await notify_admins(
            MESSAGES["order_completed"].format(
                order_id=order_id,
                username=username or "Unknown",
                telegram_id=user_id,
                pubg_id=pubg_id or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            ) + f"\nüí∞ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ: {payout_per_participant:.2f} —Ä—É–±."
        )
        await log_action(
            "complete_order",
            user_id,
            order_db_id,
            f"–ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username}, –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ {payout_per_participant:.2f} —Ä—É–±."
        )
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_complete_order –¥–ª—è {user_id}: \n{e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_complete_order –¥–ª—è {user_id}: \n{e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

@dp.message(F.text == "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def admin_rate_orders(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT memo_order_id, customer_info, amount FROM orders WHERE status = 'completed' AND rating = 0"
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.", reply_markup=get_admin_orders_submenu_keyboard())
            return

        for memo_order_id, customer_info, amount in orders:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="1‚≠ê", callback_data=f"admin_rate_{memo_order_id}_1"),
                    InlineKeyboardButton(text="2‚≠ê", callback_data=f"admin_rate_{memo_order_id}_2"),
                    InlineKeyboardButton(text="3‚≠ê", callback_data=f"admin_rate_{memo_order_id}_3"),
                    InlineKeyboardButton(text="4‚≠ê", callback_data=f"admin_rate_{memo_order_id}_4"),
                    InlineKeyboardButton(text="5‚≠ê", callback_data=f"admin_rate_{memo_order_id}_5")
                ]
            ])

            await message.answer(
                f"üìù –ó–∞–∫–∞–∑ #{memo_order_id}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {customer_info}\n"
                f"–°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
                reply_markup=keyboard
            )
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ admin_rate_orders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_orders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ admin_rate_orders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_orders_submenu_keyboard())


@dp.callback_query(F.data.startswith("admin_rate_"))
async def admin_rate_order_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    try:
        parts = callback.data.split("_")
        memo_order_id = parts[2]
        rating = int(parts[3])

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, squad_id FROM orders WHERE memo_order_id = ? AND status = 'completed'",
                (memo_order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
                await callback.answer()
                return

            order_db_id, squad_id = order

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑–∞
            await conn.execute(
                "UPDATE orders SET rating = ? WHERE id = ?",
                (rating, order_db_id)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
            reputation_bonus = rating * 100  # 1‚≠ê=100, 2‚≠ê=200, ..., 5‚≠ê=500

            cursor = await conn.execute(
                "SELECT escort_id FROM order_escorts WHERE order_id = ?",
                (order_db_id,)
            )
            escorts = await cursor.fetchall()

            for (escort_id,) in escorts:
                await conn.execute(
                    "UPDATE escorts SET reputation = reputation + ? WHERE id = ?",
                    (reputation_bonus, escort_id)
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–∞
            if squad_id:
                await update_squad_reputation(squad_id, rating)

            await conn.commit()

        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{memo_order_id} –æ—Ü–µ–Ω—ë–Ω –Ω–∞ {rating}‚≠ê\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ +{reputation_bonus} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏."
        )

        await log_action("admin_rate_order", user_id, order_db_id, f"–ê–¥–º–∏–Ω –æ—Ü–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{memo_order_id} –Ω–∞ {rating} –∑–≤—ë–∑–¥")
        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_rate_order_callback –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ admin_rate_order_callback –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ admin_rate_order_callback –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message(F.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É")
async def request_payout(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id, _, _, balance, _, _, username, _, _, _, _, _, _ = escort

        if balance <= 0:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return

        await message.answer(f"\n –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} —Ä—É–±.):", reply_markup=get_cancel_keyboard())
        await state.set_state(Form.payout_request)
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ request_payout –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ request_payout –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

@dp.message(Form.payout_request)
async def process_payout_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
        return
    try:
        payout_amount = float(message.text.strip())
        if payout_amount <= 0:
            await message.answer("\n –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", reply_markup=get_cancel_keyboard())
            return

        escort = await get_escort(user_id)
        if not escort:
            await message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id, _, _, balance, _, _, username, _, _, _, _, _, _ = escort

        if payout_amount > balance:
            await message.answer(f"\n –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} —Ä—É–±.", reply_markup=get_cancel_keyboard())
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data=f"approve_payout_{user_id}_{payout_amount}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data=f"reject_payout_{user_id}_{payout_amount}")]
        ])

        await message.answer(
            f"\n –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É {payout_amount:.2f} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!\n\n"
            f"–ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @ItMEMOO\n"
            f"–ò–ª–∏ @MemoSpamBlock_bot",
            reply_markup=await get_menu_keyboard(user_id)
        )
        await notify_admins(
            f"\n –ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç @{username or 'Unknown'} (ID: {user_id}) –Ω–∞ —Å—É–º–º—É {payout_amount:.2f} —Ä—É–±.",
            reply_markup=admin_keyboard
        )
        await log_action(
            "payout_request",
            user_id,
            None,
            f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã {payout_amount:.2f} —Ä—É–±."
        )
        await state.clear()
    except ValueError:
        await message.answer("\n –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=get_cancel_keyboard())
        return
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_payout_request –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_payout_request –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

@dp.callback_query(F.data.startswith("select_order_"))
async def select_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT memo_order_id FROM orders WHERE id = ?", (order_db_id,))
            order = await cursor.fetchone()
            if not order:
                await callback.message.answer("\n –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return
        await callback.message.edit_text(f"\n –ó–∞–∫–∞–∑ #{order[0]}. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.", reply_markup=get_order_keyboard(order_db_id))
        await callback.answer()
    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ select_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("join_order_"))
async def join_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return
        escort_id, squad_id, pubg_id, _, _, _, _, _, _, _, _, _, _ = escort
        if not pubg_id:
            await callback.message.answer("\n –£–∫–∞–∂–∏—Ç–µ PUBG ID!", reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return
        if not squad_id:
            await callback.message.answer(MESSAGES["not_in_squad"], reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return
        order_db_id = int(callback.data.split("_")[-1])
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT status, memo_order_id FROM orders WHERE id = ?", (order_db_id,)
            )
            order = await cursor.fetchone()
            if not order or order[0] != 'pending':
                await callback.message.answer(MESSAGES["order_already_in_progress"].format(order_id=order[1]), reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–∏–º —Å–∫–≤–∞–¥–æ–º
            cursor = await conn.execute(
                "SELECT squad_id FROM order_applications WHERE order_id = ? LIMIT 1", (order_db_id,)
            )
            existing_squad = await cursor.fetchone()
            if existing_squad and existing_squad[0] != squad_id:
                await callback.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–∫–≤–∞–¥–æ–º!", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_applications WHERE order_id = ? AND escort_id = ?",
                (order_db_id, escort_id)
            )
            if (await cursor.fetchone())[0] > 0:
                await callback.message.answer("‚úÖ –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É!", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —Å–∫–≤–∞–¥–∞
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_applications WHERE order_id = ? AND squad_id = ?",
                (order_db_id, squad_id)
            )
            participant_count = (await cursor.fetchone())[0]

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–∫–∞–∑—É
            await conn.execute(
                "INSERT INTO order_applications (order_id, escort_id, squad_id, pubg_id) VALUES (?, ?, ?, ?)",
                (order_db_id, escort_id, squad_id, pubg_id)
            )
            await conn.commit()
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–≤–∞–¥–∞
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, e.pubg_id, e.squad_id, s.name
                FROM order_applications oa
                JOIN escorts e ON oa.escort_id = e.id
                LEFT JOIN squads s ON e.squad_id = s.id
                WHERE oa.order_id = ? AND oa.squad_id = ?
                ''', (order_db_id, squad_id)
            )
            squad_applications = await cursor.fetchall()

        participants = "\n".join(
            f"@{username or 'Unknown'} (PUBG ID: {pubg_id})"
            for _, username, pubg_id, _, squad_name in squad_applications
        )

        memo_order_id = order[1]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
            squad_result = await conn.fetchone()
            current_squad_name = squad_result[0] if squad_result else "Unknown"

        response = f"üìã –ó–∞–∫–∞–∑ #{memo_order_id} - –°–∫–≤–∞–¥ '{current_squad_name}':\n\n"
        response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants if participants else '–ù–∏–∫–æ–≥–æ –ø–æ–∫–∞ –Ω–µ—Ç'}\n\n"
        response += f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(squad_applications)} (–º–∏–Ω–∏–º—É–º 2 –¥–ª—è —Å—Ç–∞—Ä—Ç–∞)"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"start_order_{order_db_id}")],
            [InlineKeyboardButton(text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –∑–∞–∫–∞–∑", callback_data=f"leave_order_{order_db_id}")]
        ])
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.message.answer(
            f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∑–∞–∫–∞–∑—É #{memo_order_id}!\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫–≤–∞–¥–∞ '{current_squad_name}':\n{participants}",
            reply_markup=await get_menu_keyboard(user_id)
        )
        await log_action("join_order", user_id, order_db_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∑–∞–∫–∞–∑—É #{memo_order_id}")
        await callback.answer()
    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ join_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ join_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("start_order_"))
async def start_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort or not escort[1]:
            await callback.message.answer(MESSAGES["not_in_squad"], reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return
        escort_id, squad_id, pubg_id, _, _, _, _, _, _, _, _, _, _ = escort
        order_db_id = int(callback.data.split("_")[-1])
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT memo_order_id, status, amount FROM orders WHERE id = ?",
                (order_db_id,)
            )
            order = await cursor.fetchone()
            if not order or order[1] != 'pending':
                await callback.message.answer(MESSAGES["order_already_in_progress"].format(order_id=order[0]), reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∫–≤–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await conn.execute(
                "SELECT escort_id, squad_id FROM order_applications WHERE order_id = ? AND squad_id = ?",
                (order_db_id, squad_id)
            )
            squad_applications = await cursor.fetchall()

            if len(squad_applications) < 2:  # –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∫–≤–∞–¥–∞
                async with aiosqlite.connect(DB_PATH) as conn:
                    cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
                    squad_result = await conn.fetchone()
                    current_squad_name = squad_result[0] if squad_result else "Unknown"

                new_text = f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!\n\n–°–∫–≤–∞–¥: {current_squad_name}\n–¢—Ä–µ–±—É–µ—Ç—Å—è: –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞\n–°–µ–π—á–∞—Å: {len(squad_applications)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.edit_text(
                        new_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"start_order_{order_db_id}")],
                            [InlineKeyboardButton(text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –∑–∞–∫–∞–∑", callback_data=f"leave_order_{order_db_id}")]
                        ])
                    )
                except TelegramAPIError as e:
                    if "message is not modified" not in str(e):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                await callback.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!")
                return

            # –í—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∫–≤–∞–¥–∞
            winning_squad_id = squad_id
            valid_applications = squad_applications
            commission = order[2] * 0.2
            for escort_id, _ in valid_applications:
                cursor = await conn.execute("SELECT pubg_id FROM escorts WHERE id = ?", (escort_id,))
                pubg_id = (await cursor.fetchone())[0]
                await conn.execute(
                    "INSERT INTO order_escorts (order_id, escort_id, pubg_id) VALUES (?, ?, ?)",
                    (order_db_id, escort_id, pubg_id)
                )
                # Removed: UPDATE completed_orders +1 here
            await conn.execute(
                "UPDATE orders SET status = 'in_progress', squad_id = ?, commission_amount = ? WHERE id = ?",
                (winning_squad_id, commission, order_db_id)
            )
            await conn.execute(
                "DELETE FROM order_applications WHERE order_id = ?",
                (order_db_id,)
            )
            await conn.commit()
        order_id = order[0]
        participants = "\n".join(
            f"@{username or 'Unknown'} (PUBG ID: {pubg_id}, Squad: {squad_name or 'No squad'})"
            for _, username, pubg_id, _, squad_name in await get_order_escorts(order_db_id)
        )
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (winning_squad_id,))
            squad_result = await conn.fetchone()
            squad_name = squad_result[0] if squad_result else "Unknown"
        response = MESSAGES["order_taken"].format(order_id=order_id, squad_name=squad_name, participants=participants)

        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = get_confirmed_order_keyboard(order_id, is_admin=is_admin(user_id))
        await callback.message.edit_text(response, reply_markup=keyboard)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∫–∞–∑–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        for telegram_id, _, _, _, _ in await get_order_escorts(order_db_id):
            try:
                user_keyboard = get_confirmed_order_keyboard(order_id, is_admin=is_admin(telegram_id)) if is_admin(telegram_id) else None
                await bot.send_message(
                    telegram_id,
                    f"–ó–∞–∫–∞–∑ #{order_id} –Ω–∞—á–∞—Ç!\n{participants}",
                    reply_markup=user_keyboard
                )
            except TelegramAPIError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id}: {e}")
        await notify_squad(
            winning_squad_id,
            MESSAGES["order_taken"].format(
                order_id=order_id,
                squad_name=squad_name,
                participants=participants
            )
        )
        await log_action("start_order", user_id, order_db_id, f"–ó–∞–∫–∞–∑ #{order_id} –Ω–∞—á–∞—Ç –Ω–∞ —Å–∫–≤–∞–¥–µ {squad_name}")
        await callback.answer()
    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ start_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("complete_order_"))
async def complete_order_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    memo_order_id = callback.data.split('_')[-1]
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("\n –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return
        escort_id, _, pubg_id, _, _, _, username, _, _, _, _, _, _ = escort
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, status, amount FROM orders WHERE memo_order_id = ? AND status = 'in_progress'",
                (memo_order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback.message.answer(f"\n –ó–∞–∫–∞–∑ #{memo_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return
            order_db_id, _, amount = order

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_escorts WHERE order_id = ?",
                (order_db_id,)
            )
            participant_count = (await cursor.fetchone())[0]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É —Å —É—á–µ—Ç–æ–º 20% –∫–æ–º–∏—Å—Å–∏–∏
            commission = amount * 0.2
            payout_per_participant = (amount - commission) / participant_count

            await conn.execute(
                '''
                UPDATE orders SET status = 'completed', completed_at = ? WHERE id = ?
                ''', (datetime.now().isoformat(), order_db_id)
            )
            await conn.execute(
                '''
                UPDATE escorts SET
                    completed_orders = completed_orders + 1,
                    reputation = reputation + 200,
                    balance = balance + ?
                WHERE id IN (
                    SELECT escort_id FROM order_escorts WHERE order_id = ?
                )
                ''', (payout_per_participant, order_db_id)
            )
            await conn.commit()
        await callback.message.edit_text(
            MESSAGES["order_completed"].format(
                order_id=memo_order_id,
                username=username or "Unknown",
                telegram_id=user_id,
                pubg_id=pubg_id or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            ) + f"\nüí∞ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ: {payout_per_participant:.2f} —Ä—É–±.",
            reply_markup=None
        )
        await notify_admins(
            MESSAGES["order_completed"].format(
                order_id=memo_order_id,
                username=username or "Unknown",
                telegram_id=user_id,
                pubg_id=pubg_id or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            ) + f"\nüí∞ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ: {payout_per_participant:.2f} —Ä—É–±."
        )
        await log_action(
            "complete_order",
            user_id,
            order_db_id,
            f"–ó–∞–∫–∞–∑ #{memo_order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username}, –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ {payout_per_participant:.2f} —Ä—É–±."
        )
        await callback.answer()
    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_order_callback –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ complete_order_callback –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("cancel_confirmed_order_"))
async def cancel_confirmed_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        memo_order_id = callback.data.split("_")[-1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, status, squad_id FROM orders WHERE memo_order_id = ?",
                (memo_order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return

            order_db_id, status, squad_id = order

            if status != 'in_progress':
                await callback.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–∞–∫–∞–∑–µ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–æ–º
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_escorts oe JOIN escorts e ON oe.escort_id = e.id WHERE oe.order_id = ? AND e.telegram_id = ?",
                (order_db_id, user_id)
            )
            is_participant = (await cursor.fetchone())[0] > 0

            if not (is_participant or is_admin(user_id)):
                await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.", reply_markup=await get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            await conn.execute(
                "UPDATE orders SET status = 'pending' WHERE id = ?",
                (order_db_id,)
            )

            # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞
            await conn.execute(
                "DELETE FROM order_escorts WHERE order_id = ?",
                (order_db_id,)
            )

            await conn.commit()

        await callback.message.edit_text(f"–ó–∞–∫–∞–∑ #{memo_order_id} –æ—Ç–º–µ–Ω–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è.", reply_markup=None)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
        if squad_id:
            await notify_squad(squad_id, f"–ó–∞–∫–∞–∑ #{memo_order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è.")

        await log_action(
            "cancel_confirmed_order",
            user_id,
            order_db_id,
            f"–ó–∞–∫–∞–∑ #{memo_order_id} –æ—Ç–º–µ–Ω–µ–Ω –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'"
        )
        await callback.answer()

    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_confirmed_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ cancel_confirmed_order –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()

@dp.message(F.text == "üö™ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'admin_panel'
        await message.answer("\n –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ admin_panel –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üìã –°–∫–≤–∞–¥—ã")
async def squads_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'squads_submenu'
        await message.answer("üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–∞–º–∏:", reply_markup=get_squads_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ squads_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üë§ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ")
async def escorts_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'escorts_submenu'
        await message.answer("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–º–∏:", reply_markup=get_escorts_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ escorts_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìù –ó–∞–∫–∞–∑—ã")
async def admin_orders_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'admin_orders_submenu'
        await message.answer("\n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:", reply_markup=get_admin_orders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ admin_orders_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üö´ –ë–∞–Ω—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
async def bans_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'bans_submenu'
        await message.answer("\n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:", reply_markup=get_bans_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ bans_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã")
async def balances_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'balances_submenu'
        await message.answer("\n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏:", reply_markup=get_balances_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ balances_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def users_submenu_handler(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'users_submenu'
        await message.answer("\n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=get_users_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ users_submenu_handler –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìä –ü—Ä–æ—á–µ–µ")
async def misc_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'misc_submenu'
        await message.answer("\n –ü—Ä–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=get_misc_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ misc_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞–º–∏")
async def leaders_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'leaders_submenu'
        await message.answer("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞–º–∏:", reply_markup=get_leaders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ leaders_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìû –°–≤—è–∑—å")
async def communication_submenu(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'communication_submenu'
        await message.answer("üìû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑—å—é:", reply_markup=get_communication_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ communication_submenu –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
async def contact_user_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.contact_user_id)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ contact_user_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_communication_submenu_keyboard())

@dp.message(Form.contact_user_id)
async def process_contact_user_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_communication_submenu_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        await state.update_data(target_user_id=target_user_id)
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.contact_user_message)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))

@dp.message(Form.contact_user_message)
async def process_contact_user_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_communication_submenu_keyboard())
        await state.clear()
        return
    
    contact_message = message.text.strip()
    if not contact_message:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
        return
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        
        if not target_user_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=get_communication_submenu_keyboard())
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                target_user_id,
                contact_message
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", reply_markup=get_communication_submenu_keyboard())
        except TelegramAPIError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=get_communication_submenu_keyboard())
        
        await log_action("contact_user", user_id, None, f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {contact_message}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact_user_message –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_communication_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def broadcast_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.broadcast_message)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_communication_submenu_keyboard())

@dp.message(Form.broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_communication_submenu_keyboard())
        await state.clear()
        return
    
    broadcast_text = message.text.strip()
    if not broadcast_text:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id FROM escorts")
            users = await cursor.fetchall()
        
        sent_count = 0
        failed_count = 0
        
        for (telegram_id,) in users:
            try:
                await bot.send_message(telegram_id, broadcast_text)
                sent_count += 1
            except TelegramAPIError:
                failed_count += 1
        
        await message.answer(
            f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}",
            reply_markup=get_communication_submenu_keyboard()
        )
        
        await log_action("broadcast", user_id, None, f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_broadcast_message –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_communication_submenu_keyboard())
        await state.clear()


@dp.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
async def exit_admin_panel(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'main_menu'
        await message.answer("\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ exit_admin_panel –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.callback_query(F.data.startswith("approve_payout_"))
async def approve_payout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    try:
        parts = callback.data.split("_")
        target_user_id = int(parts[2])
        payout_amount = float(parts[3])

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username, balance FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user = await cursor.fetchone()
            if not user:
                await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return

            username, balance = user
            if balance < payout_amount:
                await callback.message.edit_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f} —Ä—É–±.")
                await callback.answer()
                return

            # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
            await conn.execute(
                "UPDATE escorts SET balance = balance - ? WHERE telegram_id = ?",
                (payout_amount, target_user_id)
            )
            await conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                target_user_id,
                f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {payout_amount:.2f} —Ä—É–±. –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –≤—ã–ø–ª–∞—á–µ–Ω–∞!"
            )
        except TelegramAPIError:
            pass

        await callback.message.edit_text(
            f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {payout_amount:.2f} —Ä—É–±. –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è @{username or 'Unknown'} (ID: {target_user_id})"
        )

        await log_action(
            "approve_payout",
            user_id,
            None,
            f"–û–¥–æ–±—Ä–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ {payout_amount:.2f} —Ä—É–±. –¥–ª—è @{username or 'Unknown'}"
        )
        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_payout –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ approve_payout –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        if await check_subscription(user_id):
            await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            await callback.message.answer(f"{MESSAGES['welcome']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        else:
            await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_subscription_callback –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("reject_payout_"))
async def reject_payout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    try:
        parts = callback.data.split("_")
        target_user_id = int(parts[2])
        payout_amount = float(parts[3])

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user = await cursor.fetchone()
            if not user:
                await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return

            username = user[0]

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                target_user_id,
                f"‚ùå –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {payout_amount:.2f} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except TelegramAPIError:
            pass

        await callback.message.edit_text(
            f"‚ùå –í—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {payout_amount:.2f} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è @{username or 'Unknown'} (ID: {target_user_id})"
        )

        await log_action(
            "reject_payout",
            user_id,
            None,
            f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ {payout_amount:.2f} —Ä—É–±. –¥–ª—è @{username or 'Unknown'}"
        )
        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_payout –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ reject_payout –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("select_leader_"))
async def select_leader_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        leader_telegram_id = int(callback.data.split("_")[-1])

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.username, s.name
                FROM escorts e
                JOIN squads s ON s.leader_id = e.id
                WHERE e.telegram_id = ?
                ''', (leader_telegram_id,)
            )
            leader_info = await cursor.fetchone()

        if not leader_info:
            await callback.message.edit_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return

        leader_username, squad_name = leader_info

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏–¥–µ—Ä–æ–º", callback_data=f"contact_leader_{leader_telegram_id}")]
        ])

        await callback.message.edit_text(
            f"üë®‚Äçüíº –õ–∏–¥–µ—Ä: @{leader_username or 'Unknown'}\n"
            f"ID: {leader_telegram_id}\n"
            f"–°–∫–≤–∞–¥: {squad_name}",
            reply_markup=keyboard
        )
        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_leader_callback –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ select_leader_callback –¥–ª—è {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("contact_leader_"))
async def contact_leader_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        leader_telegram_id = int(callback.data.split("_")[-1])
        await state.update_data(target_leader_id=leader_telegram_id)
        await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–∏–¥–µ—Ä–∞:", reply_markup=get_cancel_keyboard())
        await state.set_state(Form.contact_leader_message)
        await callback.answer()

    except (ValueError, TelegramAPIError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ contact_leader_callback –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("reply_support_"))
async def reply_support(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    try:
        target_user_id = int(callback.data.split("_")[-1])
        await state.update_data(target_user_id=target_user_id)
        await callback.message.answer("\n –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.support_reply)
        await callback.answer()
    except (ValueError, TelegramAPIError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reply_support –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message(Form.support_reply)
async def process_support_reply(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_admin_keyboard())
        await state.clear()
        return

    reply_text = message.text.strip()
    if not reply_text:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
        return

    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')

        if not target_user_id:
            await message.answer("\n –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=get_admin_keyboard())
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                target_user_id,
                f"\n –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}"
            )
            await message.answer("\n –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", reply_markup=get_admin_keyboard())
        except TelegramAPIError:
            await message.answer("\n –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=get_admin_keyboard())

        await log_action("support_reply", user_id, None, f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {reply_text}")
        await state.clear()

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_support_reply –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(Form.contact_leader_message)
async def process_contact_leader_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
        return

    contact_message = message.text.strip()
    if not contact_message:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard())
        return

    try:
        data = await state.get_data()
        target_leader_id = data.get('target_leader_id')

        if not target_leader_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=await get_menu_keyboard(user_id))
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender_username = message.from_user.username or "Unknown"
        sender_info = f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sender_username} (ID: {user_id})" if not is_admin(user_id) else "–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–µ—Ä—É
        try:
            await bot.send_message(
                target_leader_id,
                f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {sender_info}:\n\n{contact_message}"
            )
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏–¥–µ—Ä—É!", reply_markup=await get_menu_keyboard(user_id))
        except TelegramAPIError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–µ—Ä—É.", reply_markup=await get_menu_keyboard(user_id))

        await log_action("contact_leader", user_id, None, f"–°–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–¥–µ—Ä—É {target_leader_id}: {contact_message}")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact_leader_message –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–∞–º–∏ ---

@dp.message(F.text == "üëë –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã")
async def add_leader(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.leader_user_id)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ add_leader –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(Form.leader_user_id)
async def process_leader_user_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()
        return
    try:
        leader_telegram_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id, squad_id FROM escorts WHERE telegram_id = ?", (leader_telegram_id,))
            escort_record = await cursor.fetchone()
            if not escort_record:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {leader_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            escort_id, current_squad_id = escort_record
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥–µ—Ä–æ–º
            cursor = await conn.execute("SELECT squad_id FROM squad_leaders WHERE leader_id = ?", (escort_id,))
            existing_leader = await cursor.fetchone()
            if existing_leader:
                await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º.", reply_markup=get_cancel_keyboard(True))
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∫–≤–∞–¥–µ, –¥–µ–ª–∞–µ–º –µ–≥–æ –ª–∏–¥–µ—Ä–æ–º —ç—Ç–æ–≥–æ —Å–∫–≤–∞–¥–∞
            if current_squad_id:
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–¥–µ—Ä–æ–º –µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–≤–∞–¥–∞
                await conn.execute("INSERT INTO squad_leaders (leader_id, squad_id) VALUES (?, ?)", (escort_id, current_squad_id))
                await conn.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞
                cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (current_squad_id,))
                squad_result = await cursor.fetchone()
                squad_name = squad_result[0] if squad_result else "Unknown"
                
                await message.answer(f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {leader_telegram_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞ '{squad_name}'!", reply_markup=get_leaders_submenu_keyboard())
                await log_action("add_leader", user_id, None, f"–ù–∞–∑–Ω–∞—á–µ–Ω –ª–∏–¥–µ—Ä {leader_telegram_id} –¥–ª—è —Å–∫–≤–∞–¥–∞ '{squad_name}'")
                await state.clear()
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–∫–≤–∞–¥–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
                await state.update_data(leader_telegram_id=leader_telegram_id)
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–∫–≤–∞–¥–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:", reply_markup=get_cancel_keyboard(True))
                await state.set_state(Form.leader_squad_name)
                
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_leader_user_id –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()

@dp.message(Form.leader_squad_name)
async def process_leader_squad_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_admin_keyboard())
        await state.clear()
        return
    squad_name = message.text.strip()
    if not squad_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard(True))
        return

    try:
        data = await state.get_data()
        leader_telegram_id = data.get('leader_telegram_id')

        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor = await conn.execute("SELECT id FROM escorts WHERE telegram_id = ?", (leader_telegram_id,))
            escort_record = await cursor.fetchone()
            if not escort_record:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {leader_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            escort_id = escort_record[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥–µ—Ä–æ–º
            cursor = await conn.execute("SELECT squad_id FROM squad_leaders WHERE leader_id = ?", (escort_id,))
            existing_leader = await cursor.fetchone()
            if existing_leader:
                await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º.", reply_markup=get_admin_keyboard())
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫–≤–∞–¥
            await conn.execute("INSERT INTO squads (name) VALUES (?)", (squad_name,))
            squad_id = cursor.lastrowid

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–¥–µ—Ä–æ–º
            await conn.execute("INSERT INTO squad_leaders (leader_id, squad_id) VALUES (?, ?)", (escort_id, squad_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Å–≤—è–∑—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º —Å–∫–≤–∞–¥–æ–º)
            await conn.execute("UPDATE escorts SET squad_id = ? WHERE id = ?", (squad_id, escort_id))

            await conn.commit()

        await message.answer(f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {leader_telegram_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞ '{squad_name}'!", reply_markup=get_admin_keyboard())
        await log_action("add_leader", user_id, None, f"–ù–∞–∑–Ω–∞—á–µ–Ω –ª–∏–¥–µ—Ä {leader_telegram_id} –¥–ª—è —Å–∫–≤–∞–¥–∞ '{squad_name}'")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_leader_squad_name –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_leader_squad_name –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤")
async def list_leaders(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, s.name as squad_name
                FROM escorts e
                JOIN squad_leaders sl ON e.id = sl.leader_id
                JOIN squads s ON sl.squad_id = s.id
                ORDER BY s.name
                '''
            )
            leaders = await cursor.fetchall()

        if not leaders:
            await message.answer("üëë –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=get_leaders_submenu_keyboard())
            return

        response = "üëë –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
        for telegram_id, username, squad_name in leaders:
            response += f"ID: {telegram_id}\n"
            response += f"@{username or 'Unknown'}\n"
            response += f"–°–∫–≤–∞–¥: {squad_name}\n\n"

        await message.answer(response, reply_markup=get_leaders_submenu_keyboard())

    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ list_leaders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ list_leaders –¥–ª—è {user_id}: {e}\n\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())

@dp.message(F.text == "üóëÔ∏è –£–±—Ä–∞—Ç—å –ª–∏–¥–µ—Ä–∞")
async def remove_leader(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.id, e.telegram_id, e.username, s.name as squad_name
                FROM escorts e
                JOIN squad_leaders sl ON e.id = sl.leader_id
                JOIN squads s ON sl.squad_id = s.id
                ORDER BY s.name
                '''
            )
            leaders_info = await cursor.fetchall()

        if not leaders_info:
            await message.answer("üëë –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_leaders_submenu_keyboard())
            return

        response = "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for escort_id, telegram_id, username, squad_name in leaders_info:
            response += f"ID: {escort_id} | Telegram ID: {telegram_id} | @{username or 'Unknown'} | –°–∫–≤–∞–¥: {squad_name}\n"

        await message.answer(response, reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.remove_leader_user_id)
        await state.update_data(leaders_info=leaders_info) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ remove_leader –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ remove_leader –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()

@dp.message(Form.remove_leader_user_id)
async def process_remove_leader_user_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()
        return

    try:
        target_telegram_id = int(message.text.strip())

        data = await state.get_data()
        leaders_info = data.get('leaders_info', [])

        escort_id_to_remove = None
        for escort_id, telegram_id, _, _ in leaders_info:
            if telegram_id == target_telegram_id:
                escort_id_to_remove = escort_id
                break

        if escort_id_to_remove is None:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ª–∏–¥–µ—Ä–æ–≤.", reply_markup=get_cancel_keyboard(True))
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–µ –∏ –µ–≥–æ —Å–∫–≤–∞–¥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            cursor = await conn.execute(
                '''
                SELECT e.username, s.name
                FROM escorts e
                JOIN squad_leaders sl ON e.id = sl.leader_id
                JOIN squads s ON sl.squad_id = s.id
                WHERE e.id = ?
                ''', (escort_id_to_remove,)
            )
            leader_info = await cursor.fetchone()
            if not leader_info: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–µ.", reply_markup=get_leaders_submenu_keyboard())
                await state.clear()
                return
            leader_username, squad_name = leader_info

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–≤–∞–¥–∞ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ squad_leaders
            cursor = await conn.execute("SELECT squad_id FROM squad_leaders WHERE leader_id = ?", (escort_id_to_remove,))
            squad_id_result = await cursor.fetchone()
            squad_id_to_delete = None
            if squad_id_result:
                squad_id_to_delete = squad_id_result[0]

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ squad_leaders
            await conn.execute("DELETE FROM squad_leaders WHERE leader_id = ?", (escort_id_to_remove,))

            # –£–¥–∞–ª—è–µ–º —Å–∫–≤–∞–¥
            if squad_id_to_delete:
                await conn.execute("DELETE FROM squads WHERE id = ?", (squad_id_to_delete,))
                # –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å squad_id —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–≤–∞–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
                await conn.execute("UPDATE escorts SET squad_id = NULL WHERE squad_id = ?", (squad_id_to_delete,))

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–±–∏—Ä–∞—è —Å–≤—è–∑—å —Å–æ —Å–∫–≤–∞–¥–æ–º (–µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏)
            await conn.execute("UPDATE escorts SET squad_id = NULL WHERE id = ?", (escort_id_to_remove,))

            await conn.commit()

        await message.answer(f"üëë –õ–∏–¥–µ—Ä @{leader_username or 'Unknown'} (ID: {target_telegram_id}) —É–¥–∞–ª–µ–Ω, —Å–∫–≤–∞–¥ '{squad_name}' —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=get_leaders_submenu_keyboard())
        await log_action("remove_leader", user_id, None, f"–£–¥–∞–ª–µ–Ω –ª–∏–¥–µ—Ä {target_telegram_id} (—Å–∫–≤–∞–¥: {squad_name})")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_remove_leader_user_id –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_remove_leader_user_id –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏–¥–µ—Ä–æ–º")
async def admin_contact_leader(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, s.name
                FROM escorts e
                JOIN squad_leaders sl ON e.id = sl.leader_id
                JOIN squads s ON sl.squad_id = s.id
                ORDER BY s.name
                '''
            )
            leaders = await cursor.fetchall()

        if not leaders:
            await message.answer("üëë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è —Å–≤—è–∑–∏.", reply_markup=get_leaders_submenu_keyboard())
            return

        keyboard_buttons = []
        for telegram_id, username, squad_name in leaders:
            button_text = f"@{username or 'Unknown'} ({squad_name})"
            keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"select_leader_{telegram_id}")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer("üëë –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=keyboard)

    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ admin_contact_leader –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ admin_contact_leader –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_leaders_submenu_keyboard())

@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
async def members_management_menu(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'members_management'
        await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–∫–≤–∞–¥–∞:", reply_markup=get_members_management_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ members_management_menu –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–æ–º")
async def squad_management_menu(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        user_context[user_id] = 'squad_management'
        await message.answer("üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–æ–º:", reply_markup=get_squad_management_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_management_menu –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
async def add_member_handler(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∫–≤–∞–¥:", reply_markup=get_cancel_keyboard())
        await state.set_state(Form.add_member)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_member_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_members_management_keyboard())

@dp.message(Form.add_member)
async def process_add_member(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_members_management_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–µ –∏ –µ–≥–æ —Å–∫–≤–∞–¥
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT sl.squad_id, s.name
                FROM squad_leaders sl
                JOIN squads s ON sl.squad_id = s.id
                JOIN escorts e ON sl.leader_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            leader_squad = await cursor.fetchone()
            if not leader_squad:
                await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞.", reply_markup=get_members_management_keyboard())
                await state.clear()
                return
            
            squad_id, squad_name = leader_squad
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor = await conn.execute("SELECT id, squad_id, username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=get_cancel_keyboard())
                return
            
            escort_id, current_squad_id, username = user_data
            
            if current_squad_id == squad_id:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º —Å–∫–≤–∞–¥–µ.", reply_markup=get_cancel_keyboard())
                return
            
            if current_squad_id:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–º —Å–∫–≤–∞–¥–µ.", reply_markup=get_cancel_keyboard())
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–≤–∞–¥
            await conn.execute("UPDATE escorts SET squad_id = ? WHERE id = ?", (squad_id, escort_id))
            await conn.commit()
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or 'Unknown'} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ '{squad_name}'!", reply_markup=get_members_management_keyboard())
        await log_action("add_member", user_id, None, f"–î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {target_user_id} –≤ —Å–∫–≤–∞–¥ {squad_name}")
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(target_user_id, f"üéâ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∫–≤–∞–¥ '{squad_name}'!")
        except TelegramAPIError:
            pass
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_member –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_members_management_keyboard())
        await state.clear()

@dp.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
async def remove_member_handler(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–∫–≤–∞–¥–∞:", reply_markup=get_cancel_keyboard())
        await state.set_state(Form.remove_member)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_member_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_members_management_keyboard())

@dp.message(Form.remove_member)
async def process_remove_member(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_members_management_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–µ –∏ –µ–≥–æ —Å–∫–≤–∞–¥
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT sl.squad_id, s.name
                FROM squad_leaders sl
                JOIN squads s ON sl.squad_id = s.id
                JOIN escorts e ON sl.leader_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            leader_squad = await cursor.fetchone()
            if not leader_squad:
                await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞.", reply_markup=get_members_management_keyboard())
                await state.clear()
                return
            
            squad_id, squad_name = leader_squad
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–∫–≤–∞–¥–∞
            cursor = await conn.execute("SELECT id, username FROM escorts WHERE telegram_id = ? AND squad_id = ?", (target_user_id, squad_id))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º —Å–∫–≤–∞–¥–µ.", reply_markup=get_cancel_keyboard())
                return
            
            escort_id, username = user_data
            
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if target_user_id == user_id:
                await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ —Å–∫–≤–∞–¥–∞.", reply_markup=get_cancel_keyboard())
                return
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∫–≤–∞–¥–∞
            await conn.execute("UPDATE escorts SET squad_id = NULL WHERE id = ?", (escort_id,))
            await conn.commit()
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or 'Unknown'} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∫–≤–∞–¥–∞ '{squad_name}'!", reply_markup=get_members_management_keyboard())
        await log_action("remove_member", user_id, None, f"–£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {target_user_id} –∏–∑ —Å–∫–≤–∞–¥–∞ {squad_name}")
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(target_user_id, f"‚ùå –í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–∫–≤–∞–¥–∞ '{squad_name}'.")
        except TelegramAPIError:
            pass
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_remove_member –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_members_management_keyboard())
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def list_members(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, e.pubg_id, e.completed_orders, e.balance, s.name
                FROM squad_leaders sl
                JOIN squads s ON sl.squad_id = s.id
                JOIN escorts e ON sl.leader_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            leader_info = await cursor.fetchone()
            if not leader_info:
                await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞.", reply_markup=get_members_management_keyboard())
                return
            
            squad_name = leader_info[5]
            
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, e.pubg_id, e.completed_orders, e.balance
                FROM squad_leaders sl
                JOIN escorts e2 ON sl.leader_id = e2.id
                JOIN escorts e ON e.squad_id = sl.squad_id
                WHERE e2.telegram_id = ?
                ORDER BY e.username
                ''', (user_id,)
            )
            members = await cursor.fetchall()
        
        if not members:
            await message.answer(f"üë• –í —Å–∫–≤–∞–¥–µ '{squad_name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=get_members_management_keyboard())
            return
        
        response = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫–≤–∞–¥–∞ '{squad_name}':\n\n"
        for telegram_id, username, pubg_id, completed_orders, balance in members:
            role = " (–õ–∏–¥–µ—Ä)" if telegram_id == user_id else ""
            response += f"üë§ @{username or 'Unknown'} (ID: {telegram_id}){role}\n"
            response += f"üéÆ PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            response += f"üìã –ó–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n\n"
        
        await message.answer(response, reply_markup=get_members_management_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_members –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_members_management_keyboard())

@dp.message(F.text == "üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–∫–≤–∞–¥")
async def rename_squad_handler(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞:", reply_markup=get_cancel_keyboard())
        await state.set_state(Form.rename_squad)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rename_squad_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squad_management_keyboard())

@dp.message(Form.rename_squad)
async def process_rename_squad(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_squad_management_keyboard())
        await state.clear()
        return
    
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard())
        return
    
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT sl.squad_id, s.name
                FROM squad_leaders sl
                JOIN squads s ON sl.squad_id = s.id
                JOIN escorts e ON sl.leader_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            leader_squad = await cursor.fetchone()
            if not leader_squad:
                await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞.", reply_markup=get_squad_management_keyboard())
                await state.clear()
                return
            
            squad_id, old_name = leader_squad
            
            await conn.execute("UPDATE squads SET name = ? WHERE id = ?", (new_name, squad_id))
            await conn.commit()
        
        await message.answer(f"‚úÖ –°–∫–≤–∞–¥ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'!", reply_markup=get_squad_management_keyboard())
        await log_action("rename_squad", user_id, None, f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Å–∫–≤–∞–¥ '{old_name}' –≤ '{new_name}'")
        await state.clear()
        
    except aiosqlite.IntegrityError:
        await message.answer("‚ùå –°–∫–≤–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_cancel_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_rename_squad –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squad_management_keyboard())
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
async def squad_orders_list(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    if not await is_leader(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT sl.squad_id, s.name
                FROM squad_leaders sl
                JOIN squads s ON sl.squad_id = s.id
                JOIN escorts e ON sl.leader_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            leader_squad = await cursor.fetchone()
            if not leader_squad:
                await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º —Å–∫–≤–∞–¥–∞.", reply_markup=get_squad_management_keyboard())
                return
            
            squad_id, squad_name = leader_squad
            
            cursor = await conn.execute(
                '''
                SELECT o.memo_order_id, o.customer_info, o.amount, o.status, o.created_at, o.completed_at
                FROM orders o
                WHERE o.squad_id = ?
                ORDER BY o.created_at DESC
                LIMIT 10
                ''', (squad_id,)
            )
            orders = await cursor.fetchall()
        
        if not orders:
            await message.answer(f"üìã –£ —Å–∫–≤–∞–¥–∞ '{squad_name}' –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=get_squad_management_keyboard())
            return
        
        response = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã —Å–∫–≤–∞–¥–∞ '{squad_name}':\n\n"
        for memo_order_id, customer_info, amount, status, created_at, completed_at in orders:
            status_text = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                'in_progress': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω'
            }.get(status, status)
            
            response += f"#{memo_order_id} - {customer_info}\n"
            response += f"üí∞ {amount:.2f} —Ä—É–±. | {status_text}\n"
            if completed_at:
                response += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {datetime.fromisoformat(completed_at).strftime('%d.%m %H:%M')}\n"
            response += "\n"
        
        await message.answer(response, reply_markup=get_squad_management_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_orders_list –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squad_management_keyboard())

@dp.message(F.text == "üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏–¥–µ—Ä–æ–º")
async def user_contact_leader(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort or not escort[1]:  # squad_id
            await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ.", reply_markup=await get_menu_keyboard(user_id))
            return

        squad_id = escort[1]

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username
                FROM escorts e
                JOIN squad_leaders sl ON e.id = sl.leader_id
                WHERE sl.squad_id = ?
                ''', (squad_id,)
            )
            leader = await cursor.fetchone()

        if not leader:
            await message.answer("‚ùå –£ –≤–∞—à–µ–≥–æ —Å–∫–≤–∞–¥–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–∞.", reply_markup=await get_menu_keyboard(user_id))
            return

        leader_telegram_id, leader_username = leader

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"contact_leader_{leader_telegram_id}")]
        ])

        await message.answer(
            f"üë®‚Äçüíº –í–∞—à –ª–∏–¥–µ—Ä: @{leader_username or 'Unknown'}\n"
            f"ID: {leader_telegram_id}",
            reply_markup=keyboard
        )

    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ user_contact_leader –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ user_contact_leader –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))


# --- –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_button(message: types.Message):
    user_id = message.from_user.id
    try:
        context = user_context.get(user_id, 'main_menu')
        
        if context in ['orders_submenu', 'squads_submenu', 'escorts_submenu', 'admin_orders_submenu', 
                      'bans_submenu', 'balances_submenu', 'users_submenu', 'misc_submenu', 
                      'leaders_submenu', 'communication_submenu']:
            user_context[user_id] = 'admin_panel'
            await message.answer("üö™ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
        elif context == 'personal_cabinet':
            user_context[user_id] = 'main_menu'
            await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        elif context in ['squad_management', 'members_management']:
            user_context[user_id] = 'main_menu'
            await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        else:
            user_context[user_id] = 'main_menu'
            await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_button –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥")
async def add_squad(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.squad_name)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_squad –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_submenu_keyboard())

@dp.message(Form.squad_name)
async def process_squad_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_squads_submenu_keyboard())
        await state.clear()
        return
    
    squad_name = message.text.strip()
    if not squad_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard(True))
        return
    
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("INSERT INTO squads (name) VALUES (?)", (squad_name,))
            await conn.commit()
        
        await message.answer(f"‚úÖ –°–∫–≤–∞–¥ '{squad_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=get_squads_submenu_keyboard())
        await log_action("add_squad", user_id, None, f"–°–æ–∑–¥–∞–Ω —Å–∫–≤–∞–¥ '{squad_name}'")
        await state.clear()
    except aiosqlite.IntegrityError:
        await message.answer("‚ùå –°–∫–≤–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_squad_name –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")
async def list_squads(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT s.name, COUNT(e.id) as member_count, 
                       COALESCE(AVG(e.rating), 0) as avg_rating,
                       COALESCE(SUM(e.completed_orders), 0) as total_orders
                FROM squads s
                LEFT JOIN escorts e ON s.id = e.squad_id
                GROUP BY s.id, s.name
                ORDER BY s.name
                '''
            )
            squads = await cursor.fetchall()
        
        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_squads_submenu_keyboard())
            return
        
        response = "üè† –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤:\n\n"
        for name, member_count, avg_rating, total_orders in squads:
            response += f"üè† {name}\n"
            response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
            response += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}\n"
            response += f"üìã –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
        
        await message.answer(response, reply_markup=get_squads_submenu_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_squads –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_submenu_keyboard())

@dp.message(F.text == "üóëÔ∏è –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∫–≤–∞–¥")
async def delete_squad_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads ORDER BY name")
            squads = await cursor.fetchall()
        
        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_squads_submenu_keyboard())
            return
        
        response = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–¥ –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for (name,) in squads:
            response += f"‚Ä¢ {name}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞:"
        
        await message.answer(response, reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.delete_squad)
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_squad_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_submenu_keyboard())

@dp.message(Form.delete_squad)
async def process_delete_squad(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_squads_submenu_keyboard())
        await state.clear()
        return
    
    squad_name = message.text.strip()
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            squad = await cursor.fetchone()
            if not squad:
                await message.answer("‚ùå –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            squad_id = squad[0]
            await conn.execute("UPDATE escorts SET squad_id = NULL WHERE squad_id = ?", (squad_id,))
            await conn.execute("DELETE FROM squad_leaders WHERE squad_id = ?", (squad_id,))
            await conn.execute("DELETE FROM squads WHERE id = ?", (squad_id,))
            await conn.commit()
        
        await message.answer(MESSAGES["squad_deleted"].format(squad_name=squad_name), reply_markup=get_squads_submenu_keyboard())
        await log_action("delete_squad", user_id, None, f"–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–∫–≤–∞–¥ '{squad_name}'")
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_delete_squad –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def add_escort_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nTelegram ID:Username:PUBG ID:–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.escort_info)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_escort_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_submenu_keyboard())

@dp.message(Form.escort_info)
async def process_escort_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_escorts_submenu_keyboard())
        await state.clear()
        return
    
    try:
        parts = message.text.strip().split(":")
        if len(parts) != 4:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
            return
        
        telegram_id_str, username, pubg_id, squad_name = [part.strip() for part in parts]
        telegram_id = int(telegram_id_str)
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            squad = await cursor.fetchone()
            if not squad:
                await message.answer(f"‚ùå –°–∫–≤–∞–¥ '{squad_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            squad_id = squad[0]
            
            await conn.execute(
                '''
                INSERT OR REPLACE INTO escorts (telegram_id, username, pubg_id, squad_id, rules_accepted)
                VALUES (?, ?, ?, ?, 1)
                ''', (telegram_id, username, pubg_id, squad_id)
            )
            await conn.commit()
        
        await message.answer(f"‚úÖ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ '{squad_name}'!", reply_markup=get_escorts_submenu_keyboard())
        await log_action("add_escort", user_id, None, f"–î–æ–±–∞–≤–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} –≤ —Å–∫–≤–∞–¥ '{squad_name}'")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_escort_info –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def remove_escort_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.remove_escort)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_escort_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_submenu_keyboard())

@dp.message(Form.remove_escort)
async def process_remove_escort(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_escorts_submenu_keyboard())
        await state.clear()
        return
    
    try:
        target_telegram_id = int(message.text.strip())
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_telegram_id,))
            escort = await cursor.fetchone()
            if not escort:
                await message.answer("‚ùå –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            username = escort[0]
            await conn.execute("DELETE FROM escorts WHERE telegram_id = ?", (target_telegram_id,))
            await conn.commit()
        
        await message.answer(f"‚úÖ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username or 'Unknown'} —É–¥–∞–ª–µ–Ω!", reply_markup=get_escorts_submenu_keyboard())
        await log_action("remove_escort", user_id, None, f"–£–¥–∞–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username or 'Unknown'}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_remove_escort –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")
async def escorts_balances(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username, balance, telegram_id FROM escorts ORDER BY balance DESC"
            )
            escorts = await cursor.fetchall()
        
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_escorts_submenu_keyboard())
            return
        
        response = "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:\n\n"
        for username, balance, telegram_id in escorts:
            response += f"@{username or 'Unknown'} (ID: {telegram_id}): {balance:.2f} —Ä—É–±.\n"
        
        await message.answer(response, reply_markup=get_escorts_submenu_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ escorts_balances –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_submenu_keyboard())

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def add_order_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nID –∑–∞–∫–∞–∑–∞:–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:–°—É–º–º–∞", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.add_order)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_order_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_orders_submenu_keyboard())

@dp.message(Form.add_order)
async def process_add_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_admin_orders_submenu_keyboard())
        await state.clear()
        return
    
    try:
        parts = message.text.strip().split(":")
        if len(parts) != 3:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
            return
        
        order_id, customer_info, amount_str = [part.strip() for part in parts]
        amount = float(amount_str)
        
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "INSERT INTO orders (memo_order_id, customer_info, amount) VALUES (?, ?, ?)",
                (order_id, customer_info, amount)
            )
            await conn.commit()
        
        await message.answer(
            MESSAGES["order_added"].format(
                order_id=order_id, amount=amount, description=customer_info, customer=customer_info
            ), 
            reply_markup=get_admin_orders_submenu_keyboard()
        )
        await log_action("add_order", user_id, None, f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.IntegrityError:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_orders_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
async def delete_order_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.delete_order)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_order_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_orders_submenu_keyboard())

@dp.message(Form.delete_order)
async def process_delete_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_admin_orders_submenu_keyboard())
        await state.clear()
        return
    
    order_id = message.text.strip()
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM orders WHERE memo_order_id = ?", (order_id,))
            order = await cursor.fetchone()
            if not order:
                await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            order_db_id = order[0]
            await conn.execute("DELETE FROM order_escorts WHERE order_id = ?", (order_db_id,))
            await conn.execute("DELETE FROM order_applications WHERE order_id = ?", (order_db_id,))
            await conn.execute("DELETE FROM orders WHERE id = ?", (order_db_id,))
            await conn.commit()
        
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª–µ–Ω!", reply_markup=get_admin_orders_submenu_keyboard())
        await log_action("delete_order", user_id, order_db_id, f"–£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑ #{order_id}")
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_delete_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_orders_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        await message.answer(MESSAGES["support_request"], reply_markup=get_cancel_keyboard())
        await state.set_state(Form.support_message)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ support_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(Form.support_message)
async def process_support_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()
        return
    
    support_text = message.text.strip()
    if not support_text:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard())
        return
    
    try:
        escort = await get_escort(user_id)
        username = escort[6] if escort else "Unknown"
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_support_{user_id}")]
        ])
        
        await notify_admins(
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{username} (ID: {user_id}):\n\n{support_text}",
            reply_markup=admin_keyboard
        )
        await message.answer(MESSAGES["support_sent"], reply_markup=await get_menu_keyboard(user_id))
        await log_action("support_message", user_id, None, f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {support_text}")
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_support_message –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await state.clear()

@dp.message(F.text == "‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def user_rating(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT username, total_rating, rating_count, completed_orders, telegram_id
                FROM escorts 
                WHERE rating_count > 0
                ORDER BY (total_rating / rating_count) DESC
                LIMIT 10
                '''
            )
            top_users = await cursor.fetchall()
        
        if not top_users:
            await message.answer("‚≠ê –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.", reply_markup=await get_menu_keyboard(user_id))
            return
        
        response = "‚≠ê –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
        for i, (username, total_rating, rating_count, completed_orders, telegram_id) in enumerate(top_users, 1):
            avg_rating = total_rating / rating_count
            is_current_user = telegram_id == user_id
            marker = " üëà –í–´" if is_current_user else ""
            response += f"{i}. @{username or 'Unknown'} - ‚≠ê {avg_rating:.2f} ({rating_count} –æ—Ü–µ–Ω–æ–∫, {completed_orders} –∑–∞–∫–∞–∑–æ–≤){marker}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø-10
        user_position, user_rating_value = await get_user_rating_position(user_id)
        if user_position and user_position > 10:
            response += f"\nüìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {user_position} –º–µ—Å—Ç–æ (‚≠ê {user_rating_value:.2f})"
        
        await message.answer(response, reply_markup=await get_menu_keyboard(user_id))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_rating –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–æ–≤")
async def squad_rating(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT s.name, AVG(e.total_rating / e.rating_count) as avg_rating,
                       COUNT(e.id) as member_count,
                       SUM(e.completed_orders) as total_orders
                FROM squads s
                JOIN escorts e ON s.id = e.squad_id
                WHERE e.rating_count > 0
                GROUP BY s.id
                HAVING COUNT(e.id) > 0
                ORDER BY avg_rating DESC
                LIMIT 10
                '''
            )
            top_squads = await cursor.fetchall()
        
        if not top_squads:
            await message.answer("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç —Å–∫–≤–∞–¥–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.", reply_markup=await get_menu_keyboard(user_id))
            return
        
        response = "üèÜ –¢–æ–ø-10 —Å–∫–≤–∞–¥–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
        user_squad_position, user_squad_name, user_squad_rating = await get_squad_rating_position(user_id)
        
        for i, (squad_name, avg_rating, member_count, total_orders) in enumerate(top_squads, 1):
            is_user_squad = squad_name == user_squad_name
            marker = " üëà –í–ê–® –°–ö–í–ê–î" if is_user_squad else ""
            response += f"{i}. {squad_name} - ‚≠ê {avg_rating:.2f} ({member_count} —á–µ–ª., {total_orders} –∑–∞–∫–∞–∑–æ–≤){marker}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫–≤–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø-10
        if user_squad_position and user_squad_position > 10:
            response += f"\nüìç –ü–æ–∑–∏—Ü–∏—è –≤–∞—à–µ–≥–æ —Å–∫–≤–∞–¥–∞ '{user_squad_name}': {user_squad_position} –º–µ—Å—Ç–æ (‚≠ê {user_squad_rating:.2f})"
        
        await message.answer(response, reply_markup=await get_menu_keyboard(user_id))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_rating –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

@dp.message(F.text == "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
async def ban_permanent_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –±–∞–Ω–∞:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.ban_permanent)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ban_permanent_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())

@dp.message(Form.ban_permanent)
async def process_ban_permanent(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            username = user_data[0]
            await conn.execute("UPDATE escorts SET is_banned = 1 WHERE telegram_id = ?", (target_user_id,))
            await conn.commit()
        
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or 'Unknown'} (ID: {target_user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!", reply_markup=get_bans_submenu_keyboard())
        await log_action("ban_permanent", user_id, None, f"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ban_permanent –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")
async def ban_duration_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nTelegram ID:–ß–∞—Å—ã –±–∞–Ω–∞", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.ban_duration)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ban_duration_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())

@dp.message(Form.ban_duration)
async def process_ban_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()
        return
    
    try:
        parts = message.text.strip().split(":")
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
            return
        
        target_user_id = int(parts[0])
        hours = int(parts[1])
        ban_until = datetime.now() + timedelta(hours=hours)
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            username = user_data[0]
            await conn.execute("UPDATE escorts SET ban_until = ? WHERE telegram_id = ?", (ban_until.isoformat(), target_user_id))
            await conn.commit()
        
        await message.answer(f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or 'Unknown'} (ID: {target_user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}!", reply_markup=get_bans_submenu_keyboard())
        await log_action("ban_duration", user_id, None, f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ {hours} —á–∞—Å–æ–≤")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ban_duration –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üîì –°–Ω—è—Ç—å –±–∞–Ω")
async def unban_user_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üîì –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.unban_user)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unban_user_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())

@dp.message(Form.unban_user)
async def process_unban_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            username = user_data[0]
            await conn.execute("UPDATE escorts SET is_banned = 0, ban_until = NULL WHERE telegram_id = ?", (target_user_id,))
            await conn.commit()
        
        await message.answer(MESSAGES["user_unbanned"].format(username=username or "Unknown"), reply_markup=get_bans_submenu_keyboard())
        await log_action("unban_user", user_id, None, f"–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_unban_user –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üîì –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
async def unrestrict_user_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üîì –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.unrestrict_user)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unrestrict_user_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())

@dp.message(Form.unrestrict_user)
async def process_unrestrict_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            username = user_data[0]
            await conn.execute("UPDATE escorts SET restrict_until = NULL WHERE telegram_id = ?", (target_user_id,))
            await conn.commit()
        
        await message.answer(MESSAGES["user_unrestricted"].format(username=username or "Unknown"), reply_markup=get_bans_submenu_keyboard())
        await log_action("unrestrict_user", user_id, None, f"–°–Ω—è—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_unrestrict_user –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
async def restrict_user_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nTelegram ID:–ß–∞—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.restrict_duration)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restrict_user_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())

@dp.message(Form.restrict_duration)
async def process_restrict_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()
        return
    
    try:
        parts = message.text.strip().split(":")
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
            return
        
        target_user_id = int(parts[0])
        hours = int(parts[1])
        restrict_until = datetime.now() + timedelta(hours=hours)
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            username = user_data[0]
            await conn.execute("UPDATE escorts SET restrict_until = ? WHERE telegram_id = ?", (restrict_until.isoformat(), target_user_id))
            await conn.commit()
        
        await message.answer(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or 'Unknown'} (ID: {target_user_id}) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {restrict_until.strftime('%d.%m.%Y %H:%M')}!", reply_markup=get_bans_submenu_keyboard())
        await log_action("restrict_user", user_id, None, f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ {hours} —á–∞—Å–æ–≤")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_restrict_duration –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_bans_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å")
async def add_balance_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nTelegram ID:–°—É–º–º–∞", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.balance_amount)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_balance_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_submenu_keyboard())

@dp.message(Form.balance_amount)
async def process_balance_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_balances_submenu_keyboard())
        await state.clear()
        return
    
    try:
        parts = message.text.strip().split(":")
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_cancel_keyboard(True))
            return
        
        target_user_id = int(parts[0])
        amount = float(parts[1])
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            await conn.execute("UPDATE escorts SET balance = balance + ? WHERE telegram_id = ?", (amount, target_user_id))
            await conn.commit()
        
        await message.answer(MESSAGES["balance_added"].format(amount=amount, user_id=target_user_id), reply_markup=get_balances_submenu_keyboard())
        await log_action("add_balance", user_id, None, f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_balance_amount –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def zero_balance_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=get_cancel_keyboard(True))
        await state.set_state(Form.zero_balance)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ zero_balance_handler –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_submenu_keyboard())

@dp.message(Form.zero_balance)
async def process_zero_balance(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_balances_submenu_keyboard())
        await state.clear()
        return
    
    try:
        target_user_id = int(message.text.strip())
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (target_user_id,))
            user_data = await cursor.fetchone()
            if not user_data:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            
            await conn.execute("UPDATE escorts SET balance = 0 WHERE telegram_id = ?", (target_user_id,))
            await conn.commit()
        
        await message.answer(MESSAGES["balance_zeroed"].format(user_id=target_user_id), reply_markup=get_balances_submenu_keyboard())
        await log_action("zero_balance", user_id, None, f"–û–±–Ω—É–ª–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_zero_balance –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_submenu_keyboard())
        await state.clear()

@dp.message(F.text == "üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã")
async def all_balances(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=await get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username, balance, telegram_id FROM escorts WHERE balance > 0 ORDER BY balance DESC"
            )
            balances = await cursor.fetchall()
        
        if not balances:
            await message.answer("üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –Ω–µ—Ç.", reply_markup=get_balances_submenu_keyboard())
            return
        
        response = "üí∞ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã:\n\n"
        total_balance = 0
        for username, balance, telegram_id in balances:
            response += f"@{username or 'Unknown'} (ID: {telegram_id}): {balance:.2f} —Ä—É–±.\n"
            total_balance += balance
        
        response += f"\nüíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} —Ä—É–±."
        await message.answer(response, reply_markup=get_balances_submenu_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ all_balances –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_submenu_keyboard())

@dp.callback_query(F.data.startswith("leave_order_"))
async def leave_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=await get_menu_keyboard(user_id))
            await callback.answer()
            return
        
        escort_id = escort[0]
        
        async with aiosqlite.connect(DB_PATH) as conn:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞—è–≤–æ–∫
            await conn.execute(
                "DELETE FROM order_applications WHERE order_id = ? AND escort_id = ?",
                (order_db_id, escort_id)
            )
            await conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            cursor = await conn.execute("SELECT memo_order_id FROM orders WHERE id = ?", (order_db_id,))
            order = await cursor.fetchone()
            if order:
                memo_order_id = order[0]
                await callback.message.edit_text(f"‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∑–∞–∫–∞–∑ #{memo_order_id}")
                await callback.message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        
        await callback.answer()
    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ leave_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_menu_keyboard(user_id))
        await callback.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_order –¥–ª—è {user_id}: {e}")
        await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    user_id = message.from_user.id
    try:
        if not await check_access(message):
            return
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=await get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unknown_command –¥–ª—è {user_id}: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    try:
        await init_db()
        scheduler.add_job(check_pending_orders, 'interval', hours=12)
        scheduler.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}\n{traceback.format_exc()}")
        raise

if __name__ == "__main__":
    asyncio.run(main())