
import os
import logging
import asyncio
import aiosqlite
import traceback
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import KeyboardBuilder
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter

from apscheduler.schedulers.asyncio import AsyncIOScheduler
import csv
import aiogram

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ aiogram
try:
    version_parts = aiogram.__version__.split('.')
    major, minor = int(version_parts[0]), int(version_parts[1])
    if major < 3 or (major == 3 and minor < 11):
        raise ImportError(f"–¢—Ä–µ–±—É–µ—Ç—Å—è aiogram –≤–µ—Ä—Å–∏–∏ 3.11.0 –∏–ª–∏ –≤—ã—à–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {aiogram.__version__}")
except (ValueError, IndexError):
    logger = logging.getLogger()
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é aiogram: {aiogram.__version__}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
from logging.handlers import RotatingFileHandler
handler = RotatingFileHandler("memo_bot.log", maxBytes=10*1024*1024, backupCount=5)
handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
logger.addHandler(handler)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
logger.addHandler(console_handler)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Secrets)
BOT_TOKEN = os.getenv("8428265621:AAHAHChiibGDYqzJnnuG8WnueF8ohKR11L0")
try:
    ADMIN_IDS = [int(x) for x in os.getenv("8157736162", "5042109970").split(",") if x.strip()]
except ValueError:
    logger.error("–û—à–∏–±–∫–∞: ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    raise ValueError("ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
DB_PATH = "database.db"

if not BOT_TOKEN:
    logger.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ Secrets (Tools -> Secrets)")
    print("–í–ù–ò–ú–ê–ù–ò–ï: –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ Secrets —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å Tools -> Secrets")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

if not ADMIN_IDS:
    logger.error("–û—à–∏–±–∫–∞: ADMIN_IDS –Ω–µ –∑–∞–¥–∞–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ Secrets")
    print("–í–ù–ò–ú–ê–ù–ò–ï: –î–æ–±–∞–≤—å—Ç–µ ADMIN_IDS –≤ Secrets —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å Tools -> Secrets")
    raise ValueError("ADMIN_IDS –Ω–µ –∑–∞–¥–∞–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ —Ç–æ–∫–µ–Ω–µ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
if ':' not in BOT_TOKEN:
    logger.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ")
    print("–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class Form(StatesGroup):
    squad_name = State()
    delete_squad = State()
    escort_info = State()
    remove_escort = State()
    balance_amount = State()
    add_order = State()
    ban_permanent = State()
    ban_duration = State()
    restrict_duration = State()
    unban_user = State()
    unrestrict_user = State()
    zero_balance = State()
    profit_user = State()
    support_message = State()
    reply_to_user = State()

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "no_access": "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
    "cancel_action": "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
    "invalid_format": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—É.",
    "no_squads": "‚ö†Ô∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤.",
    "no_escorts": "‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.",
    "squad_deleted": "üè† –°–∫–≤–∞–¥ '{squad_name}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!",
    "balance_added": "üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user_id}.",
    "order_added": "üìù –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω!\n–ö–ª–∏–µ–Ω—Ç: {customer}\n–°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
    "user_banned": "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.",
    "user_restricted": "‚õî –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–æ {date}.",
    "user_unbanned": "üîí –ë–∞–Ω —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.",
    "user_unrestricted": "üîì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.",
    "balance_zeroed": "üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –æ–±–Ω—É–ª–µ–Ω.",
    "no_data_to_export": "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
    "export_success": "üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}.",
    "support_request": "üì© –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
    "support_sent": "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
    "no_orders": "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "no_active_orders": "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("PRAGMA foreign_keys = ON;")
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ schema.sql –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            await conn.executescript('''
                CREATE TABLE IF NOT EXISTS squads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    total_orders INTEGER DEFAULT 0,
                    total_balance REAL DEFAULT 0.0,
                    rating REAL DEFAULT 0.0,
                    rating_count INTEGER DEFAULT 0,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TABLE IF NOT EXISTS escorts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT NOT NULL,
                    pubg_id TEXT NOT NULL,
                    squad_id INTEGER,
                    balance REAL DEFAULT 0.0,
                    reputation INTEGER DEFAULT 0,
                    completed_orders INTEGER DEFAULT 0,
                    rating REAL DEFAULT 0.0,
                    rating_count INTEGER DEFAULT 0,
                    is_banned BOOLEAN DEFAULT FALSE,
                    ban_until DATETIME,
                    restrict_until DATETIME,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (squad_id) REFERENCES squads (id)
                );

                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    memo_order_id TEXT UNIQUE NOT NULL,
                    customer_info TEXT NOT NULL,
                    amount REAL NOT NULL,
                    status TEXT DEFAULT 'pending',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    commission_amount REAL DEFAULT 0.0,
                    escort_id INTEGER,
                    FOREIGN KEY (escort_id) REFERENCES escorts (telegram_id)
                );

                CREATE TABLE IF NOT EXISTS action_log (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    action_type TEXT NOT NULL,
                    user_id INTEGER NOT NULL,
                    order_id TEXT,
                    description TEXT NOT NULL,
                    action_date DATETIME DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TABLE IF NOT EXISTS payouts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    amount REAL NOT NULL,
                    payout_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES escorts (telegram_id)
                );
            ''')
            await conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}\n{traceback.format_exc()}")
        raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def check_access(message: types.Message) -> bool:
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT is_banned, ban_until, restrict_until FROM escorts WHERE telegram_id = ?",
                (user_id,)
            )
            user = await cursor.fetchone()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ check_access: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False
    
    if not user:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return False
    is_banned, ban_until, restrict_until = user
    if is_banned:
        if ban_until and datetime.fromisoformat(ban_until) > datetime.now():
            formatted_date = datetime.fromisoformat(ban_until).strftime("%d.%m.%Y %H:%M")
            await message.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {formatted_date}.")
            return False
        elif not ban_until:
            await message.answer(MESSAGES["user_banned"])
            return False
    if restrict_until and datetime.fromisoformat(restrict_until) > datetime.now():
        formatted_date = datetime.fromisoformat(restrict_until).strftime("%d.%m.%Y %H:%M")
        await message.answer(f"‚õî –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–æ {formatted_date}.")
        return False
    return True

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_admin_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = [
        "üìù –ó–∞–∫–∞–∑—ã",
        "üè† –°–∫–≤–∞–¥—ã",
        "üë§ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ",
        "üö´ –ë–∞–Ω/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ",
        "üí∞ –ë–∞–ª–∞–Ω—Å—ã",
        "üìà –û—Ç—á–µ—Ç—ã/—Å–ø—Ä–∞–≤–∫–∞",
        "üîô –ù–∞–∑–∞–¥"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ó–∞–∫–∞–∑—ã"
def get_orders_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = ["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "üîô –ù–∞–∑–∞–¥"]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–°–∫–≤–∞–¥—ã"
def get_squads_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = [
        "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥",
        "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤",
        "üóëÔ∏è –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∫–≤–∞–¥",
        "üîô –ù–∞–∑–∞–¥"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ"
def get_escorts_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = [
        "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ",
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ",
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "üîô –ù–∞–∑–∞–¥"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ë–∞–Ω/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ"
def get_ban_restrict_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = [
        "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞",
        "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è",
        "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å",
        "üîí –°–Ω—è—Ç—å –±–∞–Ω",
        "üîì –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ",
        "üîô –ù–∞–∑–∞–¥"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–ë–∞–ª–∞–Ω—Å—ã"
def get_balances_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = [
        "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö",
        "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å",
        "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å",
        "üîô –ù–∞–∑–∞–¥"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã "–û—Ç—á–µ—Ç—ã/—Å–ø—Ä–∞–≤–∫–∞"
def get_reports_keyboard():
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = [
        "üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü",
        "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        "üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π",
        "üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "üîô –ù–∞–∑–∞–¥"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard(admin=False):
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    builder.add(types.KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_menu_keyboard(user_id: int):
    builder = KeyboardBuilder[types.ReplyKeyboardButton]()
    buttons = ["üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    if is_admin(user_id):
        buttons.append("üìñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_send_message(chat_id, text, **kwargs):
    try:
        await bot.send_message(chat_id, text, **kwargs)
    except TelegramRetryAfter as e:
        logger.warning(f"Rate limit: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.retry_after)
        await bot.send_message(chat_id, text, **kwargs)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}\n{traceback.format_exc()}")
        return False
    return True

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
async def log_action(action_type: str, user_id: int, order_id: str | None, description: str):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "INSERT INTO action_log (action_type, user_id, order_id, description) VALUES (?, ?, ?, ?)",
                (action_type, user_id, order_id, description)
            )
            await conn.commit()
        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ '{action_type}' –¥–ª—è user_id {user_id}: {description}")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è '{action_type}' –¥–ª—è user_id {user_id}: {e}\n{traceback.format_exc()}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
async def notify_admins(message: str, reply_to_user_id: int | None = None):
    tasks = []
    for admin_id in ADMIN_IDS:
        if reply_to_user_id:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{reply_to_user_id}")]
            ])
            tasks.append(safe_send_message(admin_id, message, reply_markup=markup))
        else:
            tasks.append(safe_send_message(admin_id, message))
    await asyncio.gather(*tasks, return_exceptions=True)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–≤–∞–¥–∞
async def notify_squad(squad_id: int | None, message: str):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            query = "SELECT telegram_id FROM escorts" if squad_id is None else \
                    "SELECT telegram_id FROM escorts WHERE squad_id = ?"
            params = () if squad_id is None else (squad_id,)
            cursor = await conn.execute(query, params)
            escorts = await cursor.fetchall()
        tasks = [safe_send_message(telegram_id, message) for (telegram_id,) in escorts]
        await asyncio.gather(*tasks, return_exceptions=True)
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–≤–∞–¥–∞ {squad_id}: {e}\n{traceback.format_exc()}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–¥–µ
async def get_squad_info(squad_id: int):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT name, total_orders, total_balance, rating, rating_count FROM squads WHERE id = ?",
                (squad_id,)
            )
            squad = await cursor.fetchone()
            if not squad:
                return None
            cursor = await conn.execute("SELECT COUNT(*) FROM escorts WHERE squad_id = ?", (squad_id,))
            member_count = (await cursor.fetchone())[0]
        return (*squad, member_count)
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–≤–∞–¥–µ {squad_id}: {e}\n{traceback.format_exc()}")
        return None

# –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ CSV
async def export_orders_to_csv():
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT * FROM orders")
            orders = await cursor.fetchall()
            if not orders:
                return None
        filename = f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        with open(filename, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f, quoting=csv.QUOTE_MINIMAL)
            writer.writerow(["ID", "Memo Order ID", "Customer Info", "Amount", "Status", "Created At", "Commission Amount", "Escort ID"])
            for order in orders:
                writer.writerow([str(x) if x is not None else '' for x in order])
        return filename
    except (aiosqlite.Error, OSError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤: {e}\n{traceback.format_exc()}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async def check_pending_orders():
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT memo_order_id, customer_info, amount FROM orders WHERE status = 'pending'"
            )
            orders = await cursor.fetchall()
        if orders:
            message = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö:\n"
            for order_id, customer, amount in orders:
                message += f"üìù –ó–∞–∫–∞–∑ #{order_id}, –∫–ª–∏–µ–Ω—Ç: {customer}, —Å—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
            await notify_admins(message)
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}\n{traceback.format_exc()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(lambda c: c.data.startswith("reply_"))
async def process_reply_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        reply_to_user_id = int(callback.data.split("_")[1])
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (reply_to_user_id,))
            user = await cursor.fetchone()
            username = user[0] if user else "Unknown"
        await callback.message.answer(
            f"üì® –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {reply_to_user_id}):",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.reply_to_user)
        await state.update_data(reply_to_user_id=reply_to_user_id)
        await callback.answer()
    except (ValueError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_reply_callback –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=get_admin_keyboard())
        await state.clear()
        await callback.answer()

@dp.message(Form.reply_to_user)
async def process_reply_to_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_admin_keyboard())
        await state.clear()
        return
    try:
        data = await state.get_data()
        reply_to_user_id = data.get("reply_to_user_id")
        if not reply_to_user_id:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
            await state.clear()
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (reply_to_user_id,))
            user = await cursor.fetchone()
            username = user[0] if user else "Unknown"
        reply_text = message.text.strip()
        if not reply_text:
            await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard(True))
            return
        await safe_send_message(reply_to_user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {reply_text}")
        await message.answer(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {reply_to_user_id}).",
            reply_markup=get_admin_keyboard()
        )
        await log_action(
            "reply_to_support",
            user_id,
            None,
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {reply_to_user_id}): {reply_text}"
        )
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_reply_to_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_admin_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_reply_to_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_menu_keyboard(user_id))
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ cmd_start –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(lambda message: message.text == "üìñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üìñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ admin_panel –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã "–ó–∞–∫–∞–∑—ã"
@dp.message(lambda message: message.text == "üìù –ó–∞–∫–∞–∑—ã")
async def orders_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üìù –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤:", reply_markup=get_orders_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ orders_menu –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã "–°–∫–≤–∞–¥—ã"
@dp.message(lambda message: message.text == "üè† –°–∫–≤–∞–¥—ã")
async def squads_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üè† –ú–µ–Ω—é —Å–∫–≤–∞–¥–æ–≤:", reply_markup=get_squads_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ squads_menu –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã "–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ"
@dp.message(lambda message: message.text == "üë§ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ")
async def escorts_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üë§ –ú–µ–Ω—é —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:", reply_markup=get_escorts_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ escorts_menu –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã "–ë–∞–Ω/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ"
@dp.message(lambda message: message.text == "üö´ –ë–∞–Ω/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
async def ban_restrict_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üö´ –ú–µ–Ω—é –±–∞–Ω–∞/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:", reply_markup=get_ban_restrict_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ ban_restrict_menu –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã "–ë–∞–ª–∞–Ω—Å—ã"
@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã")
async def balances_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üí∞ –ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–æ–≤:", reply_markup=get_balances_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ balances_menu –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã "–û—Ç—á–µ—Ç—ã/—Å–ø—Ä–∞–≤–∫–∞"
@dp.message(lambda message: message.text == "üìà –û—Ç—á–µ—Ç—ã/—Å–ø—Ä–∞–≤–∫–∞")
async def reports_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer("üìà –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤:", reply_markup=get_reports_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ reports_menu –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–≤–∞–¥–∞
@dp.message(lambda message: message.text == "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥")
async def add_squad(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üè† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.squad_name)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ add_squad –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_keyboard())
        await state.clear()

@dp.message(Form.squad_name)
async def process_squad_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_squads_keyboard())
        await state.clear()
        return
    squad_name = message.text.strip()
    if not squad_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard(True))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            if await cursor.fetchone():
                await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_cancel_keyboard(True))
                return
            await conn.execute("INSERT INTO squads (name) VALUES (?)", (squad_name,))
            await conn.commit()
        await message.answer(f"üè† –°–∫–≤–∞–¥ '{squad_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=get_squads_keyboard())
        await log_action("add_squad", user_id, None, f"–°–æ–∑–¥–∞–Ω —Å–∫–≤–∞–¥ '{squad_name}'")
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_squad_name –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_squads_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_squad_name –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Å–∫–≤–∞–¥–æ–≤
@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")
async def list_squads(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id, name FROM squads")
            squads = await cursor.fetchall()
        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_squads_keyboard())
            return
        response = "üè† –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤:\n"
        for squad_id, name in squads:
            squad_info = await get_squad_info(squad_id)
            if squad_info:
                name, total_orders, total_balance, rating, rating_count, member_count = squad_info
                response += (
                    f"üè† {name}\n"
                    f"üìù –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {total_balance:.2f} —Ä—É–±.\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f} ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n\n"
                )
        await message.answer(response, reply_markup=get_squads_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ list_squads –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_squads_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ list_squads –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–≤–∞–¥–∞
@dp.message(lambda message: message.text == "üóëÔ∏è –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∫–≤–∞–¥")
async def delete_squad(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.delete_squad)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ delete_squad –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_keyboard())
        await state.clear()

@dp.message(Form.delete_squad)
async def process_delete_squad(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_squads_keyboard())
        await state.clear()
        return
    squad_name = message.text.strip()
    if not squad_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard(True))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            squad = await cursor.fetchone()
            if not squad:
                await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            squad_id = squad[0]
            await conn.execute("DELETE FROM squads WHERE id = ?", (squad_id,))
            await conn.execute("UPDATE escorts SET squad_id = NULL WHERE squad_id = ?", (squad_id,))
            await conn.commit()
        await message.answer(MESSAGES["squad_deleted"].format(squad_name=squad_name), reply_markup=get_squads_keyboard())
        await log_action("delete_squad", user_id, None, f"–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–∫–≤–∞–¥ '{squad_name}'")
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_delete_squad –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_squads_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_delete_squad –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_squads_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ
@dp.message(lambda message: message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def add_escort(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ (Telegram ID, @username, PUBG ID, –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞):",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.escort_info)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ add_escort –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_keyboard())
        await state.clear()

@dp.message(Form.escort_info)
async def process_escort_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_escorts_keyboard())
        await state.clear()
        return
    try:
        parts = [x.strip() for x in message.text.split(",", 3)]
        if len(parts) != 4:
            await message.answer(
                MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, @username, PUBG123, –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞",
                reply_markup=get_cancel_keyboard(True)
            )
            return
        telegram_id, username, pubg_id, squad_name = parts
        telegram_id = int(telegram_id)
        if telegram_id == user_id:
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=get_cancel_keyboard(True))
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            squad = await cursor.fetchone()
            squad_id = squad[0] if squad else None
            if not squad:
                await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            cursor = await conn.execute("SELECT telegram_id FROM escorts WHERE telegram_id = ?", (telegram_id,))
            if await cursor.fetchone():
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            await conn.execute(
                "INSERT INTO escorts (telegram_id, username, pubg_id, squad_id) VALUES (?, ?, ?, ?)",
                (telegram_id, username, pubg_id, squad_id)
            )
            await conn.commit()
        await message.answer(f"üë§ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_escorts_keyboard())
        await log_action("add_escort", user_id, None, f"–î–æ–±–∞–≤–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {username} (ID: {telegram_id})")
        await state.clear()
    except ValueError:
        await message.answer(
            MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, @username, PUBG123, –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞",
            reply_markup=get_cancel_keyboard(True)
        )
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_escort_info –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_escorts_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_escort_info –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ
@dp.message(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def remove_escort(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.remove_escort)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ remove_escort –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_keyboard())
        await state.clear()

@dp.message(Form.remove_escort)
async def process_remove_escort(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_escorts_keyboard())
        await state.clear()
        return
    try:
        telegram_id = int(message.text.strip())
        if telegram_id == user_id:
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=get_cancel_keyboard(True))
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username = user[0]
            await conn.execute("DELETE FROM escorts WHERE telegram_id = ?", (telegram_id,))
            await conn.commit()
        await message.answer(f"üóëÔ∏è –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} —É–¥–∞–ª–µ–Ω.", reply_markup=get_escorts_keyboard())
        await log_action("remove_escort", user_id, None, f"–£–¥–∞–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} (ID: {telegram_id})")
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_remove_escort –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_escorts_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_remove_escort –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(lambda message: message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_escorts(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT telegram_id, username, pubg_id, squad_id, balance, reputation,
                       completed_orders, rating, rating_count, is_banned, ban_until, restrict_until
                FROM escorts
                '''
            )
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_escorts_keyboard())
            return
        response = "üë• –°–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:\n"
        for escort in escorts:
            telegram_id, username, pubg_id, squad_id, balance, reputation, completed_orders, rating, rating_count, is_banned, ban_until, restrict_until = escort
            squad_info = await get_squad_info(squad_id) if squad_id else None
            squad_name = squad_info[0] if squad_info else "–ù–µ—Ç"
            ban_status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if is_banned else ("‚è∞ –ë–∞–Ω –¥–æ " + datetime.fromisoformat(ban_until).strftime("%d.%m.%Y %H:%M") if ban_until else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")
            restrict_status = "‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ " + datetime.fromisoformat(restrict_until).strftime("%d.%m.%Y %H:%M") if restrict_until else "üîì –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            response += (
                f"üë§ @{username} (ID: {telegram_id})\n"
                f"üéÆ PUBG ID: {pubg_id}\n"
                f"üè† –°–∫–≤–∞–¥: {squad_name}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
                f"üåü –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
                f"üìù –ó–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f} ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
                f"üîí –°—Ç–∞—Ç—É—Å: {ban_status}\n"
                f"‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {restrict_status}\n\n"
            )
        await message.answer(response, reply_markup=get_escorts_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ list_escorts –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_escorts_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ list_escorts –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_escorts_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def add_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (ID –∑–∞–∫–∞–∑–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, —Å—É–º–º–∞):",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.add_order)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ add_order –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_orders_keyboard())
        await state.clear()

@dp.message(Form.add_order)
async def process_add_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_orders_keyboard())
        await state.clear()
        return
    try:
        parts = [x.strip() for x in message.text.split(",", 2)]
        if len(parts) != 3:
            await message.answer(
                MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: ORDER123, –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω–æ–≤, 5000",
                reply_markup=get_cancel_keyboard(True)
            )
            return
        order_id, customer, amount_str = parts
        amount = float(amount_str)
        if amount <= 0 or not order_id or not customer:
            await message.answer(
                "‚ö†Ô∏è ID –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏, —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.",
                reply_markup=get_cancel_keyboard(True)
            )
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM orders WHERE memo_order_id = ?", (order_id,))
            if await cursor.fetchone():
                await message.answer(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_cancel_keyboard(True))
                return
            await conn.execute(
                "INSERT INTO orders (memo_order_id, customer_info, amount) VALUES (?, ?, ?)",
                (order_id, customer, amount)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["order_added"].format(order_id=order_id, customer=customer, amount=amount, description=customer),
            reply_markup=get_orders_keyboard()
        )
        await log_action("add_order", user_id, order_id, f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ #{order_id} –¥–ª—è {customer}, —Å—É–º–º–∞: {amount:.2f}")
        await notify_admins(f"üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω!\n–ö–ª–∏–µ–Ω—Ç: {customer}\n–°—É–º–º–∞: {amount:.2f} —Ä—É–±.")
        await state.clear()
    except ValueError:
        await message.answer(
            MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: ORDER123, –ö–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω–æ–≤, 5000",
            reply_markup=get_cancel_keyboard(True)
        )
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_add_order –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_orders_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_add_order –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_orders_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message(lambda message: message.text == "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å")
async def add_balance(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.balance_amount)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ add_balance –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_keyboard())
        await state.clear()

@dp.message(Form.balance_amount)
async def process_balance_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_balances_keyboard())
        await state.clear()
        return
    try:
        parts = [x.strip() for x in message.text.split(",", 1)]
        if len(parts) != 2:
            await message.answer(
                MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, 1000",
                reply_markup=get_cancel_keyboard(True)
            )
            return
        telegram_id, amount_str = parts
        telegram_id = int(telegram_id)
        amount = float(amount_str)
        if amount <= 0:
            await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.", reply_markup=get_cancel_keyboard(True))
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM escorts WHERE telegram_id = ?", (telegram_id,))
            escort = await cursor.fetchone()
            if not escort:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            await conn.execute(
                "UPDATE escorts SET balance = balance + ? WHERE telegram_id = ?",
                (amount, telegram_id)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["balance_added"].format(amount=amount, user_id=telegram_id),
            reply_markup=get_balances_keyboard()
        )
        await log_action("add_balance", user_id, None, f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {telegram_id}")
        await safe_send_message(telegram_id, f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} —Ä—É–±.")
        await state.clear()
    except ValueError:
        await message.answer(
            MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, 1000",
            reply_markup=get_cancel_keyboard(True)
        )
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_balance_amount –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_balances_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_balance_amount –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message(lambda message: message.text == "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def zero_balance(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.zero_balance)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ zero_balance –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_keyboard())
        await state.clear()

@dp.message(Form.zero_balance)
async def process_zero_balance(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_balances_keyboard())
        await state.clear()
        return
    try:
        telegram_id = int(message.text.strip())
        if telegram_id == user_id:
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ–±–Ω—É–ª–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!", reply_markup=get_cancel_keyboard(True))
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            await conn.execute("UPDATE escorts SET balance = 0 WHERE telegram_id = ?", (telegram_id,))
            await conn.commit()
        await message.answer(
            MESSAGES["balance_zeroed"].format(user_id=telegram_id),
            reply_markup=get_balances_keyboard()
        )
        await log_action("zero_balance", user_id, None, f"–û–±–Ω—É–ª–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {telegram_id}")
        await safe_send_message(telegram_id, "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_zero_balance –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_balances_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_zero_balance –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞
@dp.message(lambda message: message.text == "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
async def ban_permanent(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üö´ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.ban_permanent)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ ban_permanent –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

@dp.message(Form.ban_permanent)
async def process_ban_permanent(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()
        return
    try:
        telegram_id = int(message.text.strip())
        if telegram_id == user_id:
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=get_cancel_keyboard(True))
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username = user[0]
            await conn.execute(
                "UPDATE escorts SET is_banned = 1, ban_until = NULL WHERE telegram_id = ?",
                (telegram_id,)
            )
            await conn.commit()
        await message.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.",
            reply_markup=get_ban_restrict_keyboard()
        )
        await log_action("ban_permanent", user_id, None, f"–ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) –Ω–∞–≤—Å–µ–≥–¥–∞")
        await safe_send_message(telegram_id, MESSAGES["user_banned"])
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_ban_permanent –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_ban_restrict_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_ban_permanent –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è
@dp.message(lambda message: message.text == "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")
async def ban_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ –≤ –¥–Ω—è—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.ban_duration)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ ban_duration –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

@dp.message(Form.ban_duration)
async def process_ban_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()
        return
    try:
        parts = [x.strip() for x in message.text.split(",", 1)]
        if len(parts) != 2:
            await message.answer(
                MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, 7",
                reply_markup=get_cancel_keyboard(True)
            )
            return
        telegram_id, days_str = parts
        telegram_id = int(telegram_id)
        days = int(days_str)
        if telegram_id == user_id:
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=get_cancel_keyboard(True))
            return
        if days <= 0:
            await message.answer("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.", reply_markup=get_cancel_keyboard(True))
            return
        ban_until = (datetime.now() + timedelta(days=days)).isoformat()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username = user[0]
            await conn.execute(
                "UPDATE escorts SET is_banned = 1, ban_until = ? WHERE telegram_id = ?",
                (ban_until, telegram_id)
            )
            await conn.commit()
        formatted_date = datetime.fromisoformat(ban_until).strftime("%d.%m.%Y %H:%M")
        await message.answer(
            f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {formatted_date}.",
            reply_markup=get_ban_restrict_keyboard()
        )
        await log_action("ban_duration", user_id, None, f"–ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) –¥–æ {formatted_date}")
        await safe_send_message(telegram_id, MESSAGES["user_restricted"].format(date=formatted_date))
        await state.clear()
    except ValueError:
        await message.answer(
            MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, 7",
            reply_markup=get_cancel_keyboard(True)
        )
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_ban_duration –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_ban_restrict_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_ban_duration –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
@dp.message(lambda message: message.text == "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
async def restrict_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "‚õî –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –¥–Ω—è—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.restrict_duration)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ restrict_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

@dp.message(Form.restrict_duration)
async def process_restrict_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()
        return
    try:
        parts = [x.strip() for x in message.text.split(",", 1)]
        if len(parts) != 2:
            await message.answer(
                MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, 7",
                reply_markup=get_cancel_keyboard(True)
            )
            return
        telegram_id, days_str = parts
        telegram_id = int(telegram_id)
        days = int(days_str)
        if telegram_id == user_id:
            await message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=get_cancel_keyboard(True))
            return
        if days <= 0:
            await message.answer("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.", reply_markup=get_cancel_keyboard(True))
            return
        restrict_until = (datetime.now() + timedelta(days=days)).isoformat()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username = user[0]
            await conn.execute(
                "UPDATE escorts SET restrict_until = ? WHERE telegram_id = ?",
                (restrict_until, telegram_id)
            )
            await conn.commit()
        formatted_date = datetime.fromisoformat(restrict_until).strftime("%d.%m.%Y %H:%M")
        await message.answer(
            f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {formatted_date}.",
            reply_markup=get_ban_restrict_keyboard()
        )
        await log_action("restrict_user", user_id, None, f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) –¥–æ {formatted_date}")
        await safe_send_message(telegram_id, MESSAGES["user_restricted"].format(date=formatted_date))
        await state.clear()
    except ValueError:
        await message.answer(
            MESSAGES["invalid_format"] + "\n–ü—Ä–∏–º–µ—Ä: 123456789, 7",
            reply_markup=get_cancel_keyboard(True)
        )
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_restrict_duration –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_ban_restrict_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_restrict_duration –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞
@dp.message(lambda message: message.text == "üîí –°–Ω—è—Ç—å –±–∞–Ω")
async def unban_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üîí –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.unban_user)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ unban_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

@dp.message(Form.unban_user)
async def process_unban_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()
        return
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username = user[0]
            await conn.execute(
                "UPDATE escorts SET is_banned = 0, ban_until = NULL WHERE telegram_id = ?",
                (telegram_id,)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["user_unbanned"].format(username=username),
            reply_markup=get_ban_restrict_keyboard()
        )
        await log_action("unban_user", user_id, None, f"–°–Ω—è—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id})")
        await safe_send_message(telegram_id, "üîí –í–∞—à –±–∞–Ω —Å–Ω—è—Ç. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_unban_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_ban_restrict_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_unban_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
@dp.message(lambda message: message.text == "üîì –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
async def unrestrict_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üîì –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.unrestrict_user)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ unrestrict_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

@dp.message(Form.unrestrict_user)
async def process_unrestrict_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()
        return
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username = user[0]
            await conn.execute(
                "UPDATE escorts SET restrict_until = NULL WHERE telegram_id = ?",
                (telegram_id,)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["user_unrestricted"].format(username=username),
            reply_markup=get_ban_restrict_keyboard()
        )
        await log_action("unrestrict_user", user_id, None, f"–°–Ω—è—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id})")
        await safe_send_message(telegram_id, "üîì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –≤–∞—Å —Å–Ω—è—Ç—ã. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_unrestrict_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_ban_restrict_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_unrestrict_user –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_ban_restrict_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–æ–≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö
@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")
async def list_balances(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username, balance FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_balances_keyboard())
            return
        response = "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:\n"
        for telegram_id, username, balance in escorts:
            response += f"üë§ @{username} (ID: {telegram_id}): {balance:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=get_balances_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ list_balances –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_balances_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ list_balances –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_balances_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
@dp.message(lambda message: message.text == "üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
async def monthly_report(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        start_date = (datetime.now() - timedelta(days=30)).isoformat()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT COUNT(*) as order_count, SUM(amount) as total_amount
                FROM orders
                WHERE created_at >= ?
                ''',
                (start_date,)
            )
            result = await cursor.fetchone()
            order_count, total_amount = result
            cursor = await conn.execute(
                '''
                SELECT COUNT(*) as payout_count, SUM(amount) as total_payout
                FROM payouts
                WHERE payout_date >= ?
                ''',
                (start_date,)
            )
            payout_result = await cursor.fetchone()
            payout_count, total_payout = payout_result
        total_amount = total_amount or 0
        total_payout = total_payout or 0
        response = (
            f"üìà –û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n"
            f"üìù –ó–∞–∫–∞–∑–æ–≤: {order_count}\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_amount:.2f} —Ä—É–±.\n"
            f"üí∏ –í—ã–ø–ª–∞—Ç: {payout_count}\n"
            f"üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: {total_payout:.2f} —Ä—É–±.\n"
        )
        await message.answer(response, reply_markup=get_reports_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ monthly_report –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_reports_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ monthly_report –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_reports_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        filename = await export_orders_to_csv()
        if not filename:
            await message.answer(MESSAGES["no_data_to_export"], reply_markup=get_reports_keyboard())
            return
        await message.answer(
            MESSAGES["export_success"].format(filename=filename),
            reply_markup=get_reports_keyboard()
        )
        await bot.send_document(user_id, FSInputFile(filename))
        await log_action("export_data", user_id, None, f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ {filename}")
        os.remove(filename)
    except (aiosqlite.Error, OSError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_reports_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ export_data –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_reports_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π
@dp.message(lambda message: message.text == "üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π")
async def action_log(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT action_type, user_id, order_id, description, action_date
                FROM action_log
                ORDER BY action_date DESC
                LIMIT 50
                '''
            )
            actions = await cursor.fetchall()
        if not actions:
            await message.answer("‚ö†Ô∏è –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç.", reply_markup=get_reports_keyboard())
            return
        response = "üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n"
        for action_type, action_user_id, order_id, description, action_date in actions:
            formatted_date = datetime.fromisoformat(action_date).strftime("%d.%m.%Y %H:%M")
            response += (
                f"[{formatted_date}] {action_type} (ID: {action_user_id}, –ó–∞–∫–∞–∑: {order_id or 'N/A'}): {description}\n"
            )
        await message.answer(response, reply_markup=get_reports_keyboard())
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ action_log –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_reports_keyboard())
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ action_log –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_reports_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def user_profit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        return
    try:
        await message.answer(
            "üìà –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Ö–æ–¥–µ:",
            reply_markup=get_cancel_keyboard(True)
        )
        await state.set_state(Form.profit_user)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ user_profit –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_reports_keyboard())
        await state.clear()

@dp.message(Form.profit_user)
async def process_user_profit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_reports_keyboard())
        await state.clear()
        return
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username, balance, completed_orders FROM escorts WHERE telegram_id = ?", (telegram_id,))
            user = await cursor.fetchone()
            if not user:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_keyboard(True))
                return
            username, balance, completed_orders = user
            start_date = (datetime.now() - timedelta(days=30)).isoformat()
            cursor = await conn.execute(
                '''
                SELECT COUNT(*) as order_count, SUM(amount) as total_amount
                FROM orders
                WHERE escort_id = ? AND created_at >= ? AND status = 'completed'
                ''',
                (telegram_id, start_date)
            )
            order_data = await cursor.fetchone()
            order_count, total_amount = order_data
            total_amount = total_amount or 0
            cursor = await conn.execute(
                '''
                SELECT SUM(amount) as total_payout
                FROM payouts
                WHERE user_id = ? AND payout_date >= ?
                ''',
                (telegram_id, start_date)
            )
            total_payout = (await cursor.fetchone())[0] or 0
        response = (
            f"üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id}):\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
            f"üìù –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {order_count}\n"
            f"üí∏ –°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {total_amount:.2f} —Ä—É–±.\n"
            f"üíµ –í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü: {total_payout:.2f} —Ä—É–±.\n"
        )
        await message.answer(response, reply_markup=get_reports_keyboard())
        await log_action("view_user_profit", user_id, None, f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –¥–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id})")
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.", reply_markup=get_cancel_keyboard(True))
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_user_profit –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_reports_keyboard())
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_user_profit –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_reports_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message(lambda message: message.text == "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_access(message):
        return
    try:
        await message.answer(MESSAGES["support_request"], reply_markup=get_cancel_keyboard())
        await state.set_state(Form.support_message)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ support_request –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

@dp.message(Form.support_message)
async def process_support_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await message.answer(MESSAGES["cancel_action"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT username FROM escorts WHERE telegram_id = ?", (user_id,))
            user = await cursor.fetchone()
            username = user[0] if user else "Unknown"
        support_text = message.text.strip()
        if not support_text:
            await message.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_cancel_keyboard())
            return
        await notify_admins(
            f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{username} (ID: {user_id}):\n{support_text}",
            reply_to_user_id=user_id
        )
        await message.answer(MESSAGES["support_sent"], reply_markup=get_menu_keyboard(user_id))
        await log_action("support_request", user_id, None, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {support_text}")
        await state.clear()
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ process_support_message –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ process_support_message –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_orders
@dp.message(Command("my_orders"))
async def my_orders(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_access(message):
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT memo_order_id, customer_info, amount, status, created_at
                FROM orders
                WHERE escort_id = ?
                ORDER BY created_at DESC
                LIMIT 10
                ''',
                (user_id,)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer(MESSAGES["no_orders"], reply_markup=get_menu_keyboard(user_id))
            return
        response = "üìù –í–∞—à–∏ –∑–∞–∫–∞–∑—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n"
        for order_id, customer, amount, status, created_at in orders:
            formatted_date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            status_text = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏" if status == "pending" else "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
            response += (
                f"üìù –ó–∞–∫–∞–∑ #{order_id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer}\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            )
        await message.answer(response, reply_markup=get_menu_keyboard(user_id))
        await log_action("view_my_orders", user_id, None, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ my_orders –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_menu_keyboard(user_id))
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ my_orders –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ go_back –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—à–∏–±–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
@dp.message()
async def unknown_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_access(message):
        return
    try:
        await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_menu_keyboard(user_id))
        await state.clear()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ unknown_command –¥–ª—è {user_id}: {e}\n{traceback.format_exc()}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await init_db()
        scheduler.add_job(check_pending_orders, "interval", hours=24)
        scheduler.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}\n{traceback.format_exc()}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
